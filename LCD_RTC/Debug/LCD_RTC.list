
LCD_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e7c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003004  08003004  00004004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003020  08003020  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003020  08003020  00004020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003028  08003028  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003028  08003028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800302c  0800302c  0000402c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003030  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000e0  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000067a5  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012b2  00000000  00000000  0000b7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  0000ca98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000565  00000000  00000000  0000d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f379  00000000  00000000  0000d705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008df4  00000000  00000000  0002ca7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000beda4  00000000  00000000  00035872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f4616  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ca4  00000000  00000000  000f465c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000f6300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002fec 	.word	0x08002fec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002fec 	.word	0x08002fec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <cmd_i2c>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void cmd_i2c(uint8_t cmd)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af02      	add	r7, sp, #8
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
	uint8_t d1 = (cmd & 0xF0) | 0x0C;  // RS=0, RW=0, E=1
 80004c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c6:	f023 030f 	bic.w	r3, r3, #15
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	f043 030c 	orr.w	r3, r3, #12
 80004d0:	b25b      	sxtb	r3, r3
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	73bb      	strb	r3, [r7, #14]
	uint8_t d2 = (cmd & 0xF0) | 0x08;  // RS=0, RW=0, E=0
 80004d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004da:	f023 030f 	bic.w	r3, r3, #15
 80004de:	b25b      	sxtb	r3, r3
 80004e0:	f043 0308 	orr.w	r3, r3, #8
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	737b      	strb	r3, [r7, #13]
	uint8_t Timeout = 100;
 80004ea:	2364      	movs	r3, #100	@ 0x64
 80004ec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, 0x4E, &d1, 1, Timeout);
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	f107 020e 	add.w	r2, r7, #14
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2301      	movs	r3, #1
 80004f8:	214e      	movs	r1, #78	@ 0x4e
 80004fa:	481c      	ldr	r0, [pc, #112]	@ (800056c <cmd_i2c+0xb4>)
 80004fc:	f001 f866 	bl	80015cc <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000500:	2002      	movs	r0, #2
 8000502:	f000 fc79 	bl	8000df8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, 0x4E, &d2, 1, Timeout);
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	f107 020d 	add.w	r2, r7, #13
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2301      	movs	r3, #1
 8000510:	214e      	movs	r1, #78	@ 0x4e
 8000512:	4816      	ldr	r0, [pc, #88]	@ (800056c <cmd_i2c+0xb4>)
 8000514:	f001 f85a 	bl	80015cc <HAL_I2C_Master_Transmit>

	uint8_t d3 = ((cmd << 4) & 0xF0) | 0x0C;  // RS=0, RW=0, E=1
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	011b      	lsls	r3, r3, #4
 800051c:	b25b      	sxtb	r3, r3
 800051e:	f043 030c 	orr.w	r3, r3, #12
 8000522:	b25b      	sxtb	r3, r3
 8000524:	b2db      	uxtb	r3, r3
 8000526:	733b      	strb	r3, [r7, #12]
	uint8_t d4 = ((cmd << 4) & 0xF0) | 0x08;  // RS=0, RW=0, E=0
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	b25b      	sxtb	r3, r3
 800052e:	f043 0308 	orr.w	r3, r3, #8
 8000532:	b25b      	sxtb	r3, r3
 8000534:	b2db      	uxtb	r3, r3
 8000536:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, 0x4E, &d3, 1, Timeout);
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	f107 020c 	add.w	r2, r7, #12
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	2301      	movs	r3, #1
 8000542:	214e      	movs	r1, #78	@ 0x4e
 8000544:	4809      	ldr	r0, [pc, #36]	@ (800056c <cmd_i2c+0xb4>)
 8000546:	f001 f841 	bl	80015cc <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800054a:	2002      	movs	r0, #2
 800054c:	f000 fc54 	bl	8000df8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, 0x4E, &d4, 1, Timeout);
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	f107 020b 	add.w	r2, r7, #11
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2301      	movs	r3, #1
 800055a:	214e      	movs	r1, #78	@ 0x4e
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <cmd_i2c+0xb4>)
 800055e:	f001 f835 	bl	80015cc <HAL_I2C_Master_Transmit>

}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000028 	.word	0x20000028

08000570 <data_i2c>:
void data_i2c( uint8_t data)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	uint8_t d1 = (data & 0xF0) | 0x0D;  // RS=1, RW=0, E=1
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	f023 030f 	bic.w	r3, r3, #15
 8000582:	b25b      	sxtb	r3, r3
 8000584:	f043 030d 	orr.w	r3, r3, #13
 8000588:	b25b      	sxtb	r3, r3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	73bb      	strb	r3, [r7, #14]
	uint8_t d2 = (data & 0xF0) | 0x09;  // RS=1, RW=0, E=0
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	f023 030f 	bic.w	r3, r3, #15
 8000596:	b25b      	sxtb	r3, r3
 8000598:	f043 0309 	orr.w	r3, r3, #9
 800059c:	b25b      	sxtb	r3, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	737b      	strb	r3, [r7, #13]
	uint8_t Timeout = 100;
 80005a2:	2364      	movs	r3, #100	@ 0x64
 80005a4:	73fb      	strb	r3, [r7, #15]


	HAL_I2C_Master_Transmit(&hi2c1, 0x4E, &d1, 1, Timeout);
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	f107 020e 	add.w	r2, r7, #14
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	214e      	movs	r1, #78	@ 0x4e
 80005b2:	481c      	ldr	r0, [pc, #112]	@ (8000624 <data_i2c+0xb4>)
 80005b4:	f001 f80a 	bl	80015cc <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80005b8:	2002      	movs	r0, #2
 80005ba:	f000 fc1d 	bl	8000df8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, 0x4E, &d2, 1, Timeout);
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	f107 020d 	add.w	r2, r7, #13
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	214e      	movs	r1, #78	@ 0x4e
 80005ca:	4816      	ldr	r0, [pc, #88]	@ (8000624 <data_i2c+0xb4>)
 80005cc:	f000 fffe 	bl	80015cc <HAL_I2C_Master_Transmit>

	uint8_t d3 = ((data << 4) & 0xF0) | 0x0D;  // RS=1, RW=0, E=1
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	011b      	lsls	r3, r3, #4
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	f043 030d 	orr.w	r3, r3, #13
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	733b      	strb	r3, [r7, #12]
	uint8_t d4 = ((data << 4) & 0xF0) | 0x09;  // RS=1, RW=0, E=0
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	011b      	lsls	r3, r3, #4
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	f043 0309 	orr.w	r3, r3, #9
 80005ea:	b25b      	sxtb	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, 0x4E, &d3, 1, Timeout);
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	f107 020c 	add.w	r2, r7, #12
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	214e      	movs	r1, #78	@ 0x4e
 80005fc:	4809      	ldr	r0, [pc, #36]	@ (8000624 <data_i2c+0xb4>)
 80005fe:	f000 ffe5 	bl	80015cc <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000602:	2002      	movs	r0, #2
 8000604:	f000 fbf8 	bl	8000df8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, 0x4E, &d4, 1, Timeout);
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	f107 020b 	add.w	r2, r7, #11
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	214e      	movs	r1, #78	@ 0x4e
 8000614:	4803      	ldr	r0, [pc, #12]	@ (8000624 <data_i2c+0xb4>)
 8000616:	f000 ffd9 	bl	80015cc <HAL_I2C_Master_Transmit>
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000028 	.word	0x20000028

08000628 <data>:
void data(char *s)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	while(*s |= '\0')
 8000630:	e007      	b.n	8000642 <data+0x1a>
	{

	    data_i2c(*s);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ff9a 	bl	8000570 <data_i2c>
		s++;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3301      	adds	r3, #1
 8000640:	607b      	str	r3, [r7, #4]
	while(*s |= '\0')
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1ef      	bne.n	8000632 <data+0xa>
	}
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <decToBcd.1>:
int main(void)
{

  /* USER CODE BEGIN 1 */
	uint8_t decToBcd(int val)
	{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	f8c7 c000 	str.w	ip, [r7]
		return (uint8_t)( (val/10*16) + (val%10) );
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a0f      	ldr	r2, [pc, #60]	@ (80006a8 <decToBcd.1+0x4c>)
 800066c:	fb82 1203 	smull	r1, r2, r2, r3
 8000670:	1092      	asrs	r2, r2, #2
 8000672:	17db      	asrs	r3, r3, #31
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	b2db      	uxtb	r3, r3
 8000678:	011b      	lsls	r3, r3, #4
 800067a:	b2d8      	uxtb	r0, r3
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <decToBcd.1+0x4c>)
 8000680:	fb83 1302 	smull	r1, r3, r3, r2
 8000684:	1099      	asrs	r1, r3, #2
 8000686:	17d3      	asrs	r3, r2, #31
 8000688:	1ac9      	subs	r1, r1, r3
 800068a:	460b      	mov	r3, r1
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	1ad1      	subs	r1, r2, r3
 8000694:	b2cb      	uxtb	r3, r1
 8000696:	4403      	add	r3, r0
 8000698:	b2db      	uxtb	r3, r3
    }
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	66666667 	.word	0x66666667

080006ac <main>:
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
int main(void)
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fb2c 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f934 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f9f8 	bl	8000ab4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006c4:	f000 f99a 	bl	80009fc <MX_I2C1_Init>
  MX_I2C2_Init();
 80006c8:	f000 f9c6 	bl	8000a58 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  Set_Time(57, 41, 14);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	469c      	mov	ip, r3
 80006d0:	220e      	movs	r2, #14
 80006d2:	2129      	movs	r1, #41	@ 0x29
 80006d4:	2039      	movs	r0, #57	@ 0x39
 80006d6:	f000 f8bb 	bl	8000850 <Set_Time.0>
  cmd_i2c(0x02);
 80006da:	2002      	movs	r0, #2
 80006dc:	f7ff feec 	bl	80004b8 <cmd_i2c>
  cmd_i2c(0x28);
 80006e0:	2028      	movs	r0, #40	@ 0x28
 80006e2:	f7ff fee9 	bl	80004b8 <cmd_i2c>
  cmd_i2c(0x0E);
 80006e6:	200e      	movs	r0, #14
 80006e8:	f7ff fee6 	bl	80004b8 <cmd_i2c>
  cmd_i2c(0x01);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff fee3 	bl	80004b8 <cmd_i2c>
  cmd_i2c(0x80);
 80006f2:	2080      	movs	r0, #128	@ 0x80
 80006f4:	f7ff fee0 	bl	80004b8 <cmd_i2c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Get_Time();
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	469c      	mov	ip, r3
 80006fc:	f000 f8dc 	bl	80008b8 <Get_Time.2>
	  cmd_i2c(0x80);
 8000700:	2080      	movs	r0, #128	@ 0x80
 8000702:	f7ff fed9 	bl	80004b8 <cmd_i2c>
	  array[0] = ((hour/10)+'0');
 8000706:	4b3d      	ldr	r3, [pc, #244]	@ (80007fc <main+0x150>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a3d      	ldr	r2, [pc, #244]	@ (8000800 <main+0x154>)
 800070c:	fb82 1203 	smull	r1, r2, r2, r3
 8000710:	1092      	asrs	r2, r2, #2
 8000712:	17db      	asrs	r3, r3, #31
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	b2db      	uxtb	r3, r3
 8000718:	3330      	adds	r3, #48	@ 0x30
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b39      	ldr	r3, [pc, #228]	@ (8000804 <main+0x158>)
 800071e:	701a      	strb	r2, [r3, #0]
	  array[1] = ((hour%10)+'0');
 8000720:	4b36      	ldr	r3, [pc, #216]	@ (80007fc <main+0x150>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b36      	ldr	r3, [pc, #216]	@ (8000800 <main+0x154>)
 8000726:	fb83 1302 	smull	r1, r3, r3, r2
 800072a:	1099      	asrs	r1, r3, #2
 800072c:	17d3      	asrs	r3, r2, #31
 800072e:	1ac9      	subs	r1, r1, r3
 8000730:	460b      	mov	r3, r1
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	440b      	add	r3, r1
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	1ad1      	subs	r1, r2, r3
 800073a:	b2cb      	uxtb	r3, r1
 800073c:	3330      	adds	r3, #48	@ 0x30
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b30      	ldr	r3, [pc, #192]	@ (8000804 <main+0x158>)
 8000742:	705a      	strb	r2, [r3, #1]
	  array[2] = '\0';
 8000744:	4b2f      	ldr	r3, [pc, #188]	@ (8000804 <main+0x158>)
 8000746:	2200      	movs	r2, #0
 8000748:	709a      	strb	r2, [r3, #2]
	  data(array);
 800074a:	482e      	ldr	r0, [pc, #184]	@ (8000804 <main+0x158>)
 800074c:	f7ff ff6c 	bl	8000628 <data>
	  data(":");
 8000750:	482d      	ldr	r0, [pc, #180]	@ (8000808 <main+0x15c>)
 8000752:	f7ff ff69 	bl	8000628 <data>
	  array1[0] = ((minutes/10)+'0');
 8000756:	4b2d      	ldr	r3, [pc, #180]	@ (800080c <main+0x160>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a29      	ldr	r2, [pc, #164]	@ (8000800 <main+0x154>)
 800075c:	fb82 1203 	smull	r1, r2, r2, r3
 8000760:	1092      	asrs	r2, r2, #2
 8000762:	17db      	asrs	r3, r3, #31
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	3330      	adds	r3, #48	@ 0x30
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b28      	ldr	r3, [pc, #160]	@ (8000810 <main+0x164>)
 800076e:	701a      	strb	r2, [r3, #0]
	  array1[1] = ((minutes%10)+'0');
 8000770:	4b26      	ldr	r3, [pc, #152]	@ (800080c <main+0x160>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <main+0x154>)
 8000776:	fb83 1302 	smull	r1, r3, r3, r2
 800077a:	1099      	asrs	r1, r3, #2
 800077c:	17d3      	asrs	r3, r2, #31
 800077e:	1ac9      	subs	r1, r1, r3
 8000780:	460b      	mov	r3, r1
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	1ad1      	subs	r1, r2, r3
 800078a:	b2cb      	uxtb	r3, r1
 800078c:	3330      	adds	r3, #48	@ 0x30
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <main+0x164>)
 8000792:	705a      	strb	r2, [r3, #1]
	  array1[2] = '\0';
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <main+0x164>)
 8000796:	2200      	movs	r2, #0
 8000798:	709a      	strb	r2, [r3, #2]
	  data(array1);
 800079a:	481d      	ldr	r0, [pc, #116]	@ (8000810 <main+0x164>)
 800079c:	f7ff ff44 	bl	8000628 <data>
	  data(":");
 80007a0:	4819      	ldr	r0, [pc, #100]	@ (8000808 <main+0x15c>)
 80007a2:	f7ff ff41 	bl	8000628 <data>
	  array2[0] = ((seconds/10)+'0');
 80007a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <main+0x168>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a15      	ldr	r2, [pc, #84]	@ (8000800 <main+0x154>)
 80007ac:	fb82 1203 	smull	r1, r2, r2, r3
 80007b0:	1092      	asrs	r2, r2, #2
 80007b2:	17db      	asrs	r3, r3, #31
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	3330      	adds	r3, #48	@ 0x30
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <main+0x16c>)
 80007be:	701a      	strb	r2, [r3, #0]
	  array2[1] = ((seconds%10)+'0');
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <main+0x168>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <main+0x154>)
 80007c6:	fb83 1302 	smull	r1, r3, r3, r2
 80007ca:	1099      	asrs	r1, r3, #2
 80007cc:	17d3      	asrs	r3, r2, #31
 80007ce:	1ac9      	subs	r1, r1, r3
 80007d0:	460b      	mov	r3, r1
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	1ad1      	subs	r1, r2, r3
 80007da:	b2cb      	uxtb	r3, r1
 80007dc:	3330      	adds	r3, #48	@ 0x30
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <main+0x16c>)
 80007e2:	705a      	strb	r2, [r3, #1]
	  array2[2] = '\0';
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <main+0x16c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	709a      	strb	r2, [r3, #2]
	  data(array2);
 80007ea:	480b      	ldr	r0, [pc, #44]	@ (8000818 <main+0x16c>)
 80007ec:	f7ff ff1c 	bl	8000628 <data>
	  HAL_Delay(1000);
 80007f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007f4:	f000 fb00 	bl	8000df8 <HAL_Delay>
	  Get_Time();
 80007f8:	bf00      	nop
 80007fa:	e77d      	b.n	80006f8 <main+0x4c>
 80007fc:	200000d8 	.word	0x200000d8
 8000800:	66666667 	.word	0x66666667
 8000804:	200000dc 	.word	0x200000dc
 8000808:	08003004 	.word	0x08003004
 800080c:	200000d4 	.word	0x200000d4
 8000810:	200000e0 	.word	0x200000e0
 8000814:	200000d0 	.word	0x200000d0
 8000818:	200000e4 	.word	0x200000e4

0800081c <bcdToDec.3>:
	{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
 8000826:	f8c7 c000 	str.w	ip, [r7]
		 return (int)( (val/16*10) + (val%16) );
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	091b      	lsrs	r3, r3, #4
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	461a      	mov	r2, r3
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	4413      	add	r3, r2
	}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <Set_Time.0>:
	{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b089      	sub	sp, #36	@ 0x24
 8000854:	af04      	add	r7, sp, #16
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
 800085a:	460b      	mov	r3, r1
 800085c:	71bb      	strb	r3, [r7, #6]
 800085e:	4613      	mov	r3, r2
 8000860:	717b      	strb	r3, [r7, #5]
 8000862:	4664      	mov	r4, ip
 8000864:	f8c7 c000 	str.w	ip, [r7]
		set_time[0] = decToBcd(sec);
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	46a4      	mov	ip, r4
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fef5 	bl	800065c <decToBcd.1>
 8000872:	4603      	mov	r3, r0
 8000874:	723b      	strb	r3, [r7, #8]
		set_time[1] = decToBcd(min);
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	46a4      	mov	ip, r4
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff feee 	bl	800065c <decToBcd.1>
 8000880:	4603      	mov	r3, r0
 8000882:	727b      	strb	r3, [r7, #9]
		set_time[2] = decToBcd(hour);
 8000884:	797b      	ldrb	r3, [r7, #5]
 8000886:	46a4      	mov	ip, r4
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fee7 	bl	800065c <decToBcd.1>
 800088e:	4603      	mov	r3, r0
 8000890:	72bb      	strb	r3, [r7, #10]
		HAL_I2C_Mem_Write(&hi2c2, DS3231_ADDRESS, 0x00, 1, set_time, 7, 100);
 8000892:	2364      	movs	r3, #100	@ 0x64
 8000894:	9302      	str	r3, [sp, #8]
 8000896:	2307      	movs	r3, #7
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2301      	movs	r3, #1
 80008a2:	2200      	movs	r2, #0
 80008a4:	21d0      	movs	r1, #208	@ 0xd0
 80008a6:	4803      	ldr	r0, [pc, #12]	@ (80008b4 <Set_Time.0+0x64>)
 80008a8:	f000 ff8e 	bl	80017c8 <HAL_I2C_Mem_Write>
	}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	2000007c 	.word	0x2000007c

080008b8 <Get_Time.2>:
	{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b089      	sub	sp, #36	@ 0x24
 80008bc:	af04      	add	r7, sp, #16
 80008be:	4664      	mov	r4, ip
 80008c0:	f8c7 c004 	str.w	ip, [r7, #4]
		HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, get_time, 7, 100);
 80008c4:	2364      	movs	r3, #100	@ 0x64
 80008c6:	9302      	str	r3, [sp, #8]
 80008c8:	2307      	movs	r3, #7
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2301      	movs	r3, #1
 80008d4:	2200      	movs	r2, #0
 80008d6:	21d0      	movs	r1, #208	@ 0xd0
 80008d8:	480f      	ldr	r0, [pc, #60]	@ (8000918 <Get_Time.2+0x60>)
 80008da:	f001 f86f 	bl	80019bc <HAL_I2C_Mem_Read>
		seconds = bcdToDec(get_time[0]);
 80008de:	7b3b      	ldrb	r3, [r7, #12]
 80008e0:	46a4      	mov	ip, r4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff9a 	bl	800081c <bcdToDec.3>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a0c      	ldr	r2, [pc, #48]	@ (800091c <Get_Time.2+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]
		minutes = bcdToDec(get_time[1]);
 80008ee:	7b7b      	ldrb	r3, [r7, #13]
 80008f0:	46a4      	mov	ip, r4
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff92 	bl	800081c <bcdToDec.3>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4a09      	ldr	r2, [pc, #36]	@ (8000920 <Get_Time.2+0x68>)
 80008fc:	6013      	str	r3, [r2, #0]
		hour = bcdToDec(get_time[2]);
 80008fe:	7bbb      	ldrb	r3, [r7, #14]
 8000900:	46a4      	mov	ip, r4
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ff8a 	bl	800081c <bcdToDec.3>
 8000908:	4603      	mov	r3, r0
 800090a:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <Get_Time.2+0x6c>)
 800090c:	6013      	str	r3, [r2, #0]
	}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bd90      	pop	{r4, r7, pc}
 8000916:	bf00      	nop
 8000918:	2000007c 	.word	0x2000007c
 800091c:	200000d0 	.word	0x200000d0
 8000920:	200000d4 	.word	0x200000d4
 8000924:	200000d8 	.word	0x200000d8

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	@ 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	@ 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fb2c 	bl	8002f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b28      	ldr	r3, [pc, #160]	@ (80009f4 <SystemClock_Config+0xcc>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	4a27      	ldr	r2, [pc, #156]	@ (80009f4 <SystemClock_Config+0xcc>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	@ 0x40
 800095c:	4b25      	ldr	r3, [pc, #148]	@ (80009f4 <SystemClock_Config+0xcc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b22      	ldr	r3, [pc, #136]	@ (80009f8 <SystemClock_Config+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a21      	ldr	r2, [pc, #132]	@ (80009f8 <SystemClock_Config+0xd0>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000988:	2301      	movs	r3, #1
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098c:	2310      	movs	r3, #16
 800098e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000990:	2302      	movs	r3, #2
 8000992:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000994:	2300      	movs	r3, #0
 8000996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000998:	2308      	movs	r3, #8
 800099a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800099c:	2332      	movs	r3, #50	@ 0x32
 800099e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009a0:	2304      	movs	r3, #4
 80009a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a4:	2307      	movs	r3, #7
 80009a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0320 	add.w	r3, r7, #32
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fe6d 	bl	800268c <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b8:	f000 f896 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	230f      	movs	r3, #15
 80009be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 f8ce 	bl	8002b7c <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009e6:	f000 f87f 	bl	8000ae8 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3750      	adds	r7, #80	@ 0x50
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <MX_I2C1_Init+0x50>)
 8000a02:	4a13      	ldr	r2, [pc, #76]	@ (8000a50 <MX_I2C1_Init+0x54>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <MX_I2C1_Init+0x50>)
 8000a08:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <MX_I2C1_Init+0x58>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_I2C1_Init+0x50>)
 8000a1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <MX_I2C1_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_I2C1_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <MX_I2C1_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_I2C1_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <MX_I2C1_Init+0x50>)
 8000a3a:	f000 fc83 	bl	8001344 <HAL_I2C_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a44:	f000 f850 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000028 	.word	0x20000028
 8000a50:	40005400 	.word	0x40005400
 8000a54:	000186a0 	.word	0x000186a0

08000a58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <MX_I2C2_Init+0x50>)
 8000a5e:	4a13      	ldr	r2, [pc, #76]	@ (8000aac <MX_I2C2_Init+0x54>)
 8000a60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_I2C2_Init+0x50>)
 8000a64:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <MX_I2C2_Init+0x58>)
 8000a66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_I2C2_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <MX_I2C2_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_I2C2_Init+0x50>)
 8000a76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a7a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <MX_I2C2_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_I2C2_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <MX_I2C2_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <MX_I2C2_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_I2C2_Init+0x50>)
 8000a96:	f000 fc55 	bl	8001344 <HAL_I2C_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000aa0:	f000 f822 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000007c 	.word	0x2000007c
 8000aac:	40005800 	.word	0x40005800
 8000ab0:	000186a0 	.word	0x000186a0

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_GPIO_Init+0x30>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <MX_GPIO_Init+0x30>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_GPIO_Init+0x30>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <Error_Handler+0x8>

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b32:	2007      	movs	r0, #7
 8000b34:	f000 fa36 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	@ 0x30
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a32      	ldr	r2, [pc, #200]	@ (8000c2c <HAL_I2C_MspInit+0xe8>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12c      	bne.n	8000bc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	4b31      	ldr	r3, [pc, #196]	@ (8000c30 <HAL_I2C_MspInit+0xec>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a30      	ldr	r2, [pc, #192]	@ (8000c30 <HAL_I2C_MspInit+0xec>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b2e      	ldr	r3, [pc, #184]	@ (8000c30 <HAL_I2C_MspInit+0xec>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b82:	23c0      	movs	r3, #192	@ 0xc0
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b86:	2312      	movs	r3, #18
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b92:	2304      	movs	r3, #4
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4825      	ldr	r0, [pc, #148]	@ (8000c34 <HAL_I2C_MspInit+0xf0>)
 8000b9e:	f000 fa35 	bl	800100c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <HAL_I2C_MspInit+0xec>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	4a21      	ldr	r2, [pc, #132]	@ (8000c30 <HAL_I2C_MspInit+0xec>)
 8000bac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <HAL_I2C_MspInit+0xec>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000bbe:	e031      	b.n	8000c24 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c38 <HAL_I2C_MspInit+0xf4>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12c      	bne.n	8000c24 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <HAL_I2C_MspInit+0xec>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a17      	ldr	r2, [pc, #92]	@ (8000c30 <HAL_I2C_MspInit+0xec>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <HAL_I2C_MspInit+0xec>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000be6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bec:	2312      	movs	r3, #18
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <HAL_I2C_MspInit+0xf0>)
 8000c04:	f000 fa02 	bl	800100c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <HAL_I2C_MspInit+0xec>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c10:	4a07      	ldr	r2, [pc, #28]	@ (8000c30 <HAL_I2C_MspInit+0xec>)
 8000c12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <HAL_I2C_MspInit+0xec>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3730      	adds	r7, #48	@ 0x30
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400
 8000c38:	40005800 	.word	0x40005800

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <NMI_Handler+0x4>

08000c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <MemManage_Handler+0x4>

08000c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c92:	f000 f891 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f002 f959 	bl	8002fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fcdb 	bl	80006ac <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d04:	08003030 	.word	0x08003030
  ldr r2, =_sbss
 8000d08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d0c:	200000ec 	.word	0x200000ec

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f931 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fed4 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f93b 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f911 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	200000e8 	.word	0x200000e8

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200000e8 	.word	0x200000e8

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

   while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	@ (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	@ (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	@ 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff47 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff5c 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffb0 	bl	8000f60 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	@ 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	e16b      	b.n	8001300 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	429a      	cmp	r2, r3
 8001042:	f040 815a 	bne.w	80012fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d005      	beq.n	800105e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105a:	2b02      	cmp	r3, #2
 800105c:	d130      	bne.n	80010c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 0201 	and.w	r2, r3, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d017      	beq.n	80010fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d123      	bne.n	8001150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	08da      	lsrs	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3208      	adds	r2, #8
 800114a:	69b9      	ldr	r1, [r7, #24]
 800114c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0203 	and.w	r2, r3, #3
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80b4 	beq.w	80012fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b60      	ldr	r3, [pc, #384]	@ (8001318 <HAL_GPIO_Init+0x30c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	4a5f      	ldr	r2, [pc, #380]	@ (8001318 <HAL_GPIO_Init+0x30c>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001318 <HAL_GPIO_Init+0x30c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ae:	4a5b      	ldr	r2, [pc, #364]	@ (800131c <HAL_GPIO_Init+0x310>)
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3302      	adds	r3, #2
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a52      	ldr	r2, [pc, #328]	@ (8001320 <HAL_GPIO_Init+0x314>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d02b      	beq.n	8001232 <HAL_GPIO_Init+0x226>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a51      	ldr	r2, [pc, #324]	@ (8001324 <HAL_GPIO_Init+0x318>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d025      	beq.n	800122e <HAL_GPIO_Init+0x222>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a50      	ldr	r2, [pc, #320]	@ (8001328 <HAL_GPIO_Init+0x31c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01f      	beq.n	800122a <HAL_GPIO_Init+0x21e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4f      	ldr	r2, [pc, #316]	@ (800132c <HAL_GPIO_Init+0x320>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d019      	beq.n	8001226 <HAL_GPIO_Init+0x21a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001330 <HAL_GPIO_Init+0x324>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x216>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001334 <HAL_GPIO_Init+0x328>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x212>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4c      	ldr	r2, [pc, #304]	@ (8001338 <HAL_GPIO_Init+0x32c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x20e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4b      	ldr	r2, [pc, #300]	@ (800133c <HAL_GPIO_Init+0x330>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x20a>
 8001212:	2307      	movs	r3, #7
 8001214:	e00e      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001216:	2308      	movs	r3, #8
 8001218:	e00c      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800121a:	2306      	movs	r3, #6
 800121c:	e00a      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800121e:	2305      	movs	r3, #5
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001222:	2304      	movs	r3, #4
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001232:	2300      	movs	r3, #0
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001244:	4935      	ldr	r1, [pc, #212]	@ (800131c <HAL_GPIO_Init+0x310>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <HAL_GPIO_Init+0x334>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001276:	4a32      	ldr	r2, [pc, #200]	@ (8001340 <HAL_GPIO_Init+0x334>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127c:	4b30      	ldr	r3, [pc, #192]	@ (8001340 <HAL_GPIO_Init+0x334>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a0:	4a27      	ldr	r2, [pc, #156]	@ (8001340 <HAL_GPIO_Init+0x334>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a6:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <HAL_GPIO_Init+0x334>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001340 <HAL_GPIO_Init+0x334>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <HAL_GPIO_Init+0x334>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f4:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <HAL_GPIO_Init+0x334>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	f67f ae90 	bls.w	8001028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	@ 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40021400 	.word	0x40021400
 8001338:	40021800 	.word	0x40021800
 800133c:	40021c00 	.word	0x40021c00
 8001340:	40013c00 	.word	0x40013c00

08001344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e12b      	b.n	80015ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d106      	bne.n	8001370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fbea 	bl	8000b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2224      	movs	r2, #36	@ 0x24
 8001374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013a8:	f001 fde0 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 80013ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	4a81      	ldr	r2, [pc, #516]	@ (80015b8 <HAL_I2C_Init+0x274>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d807      	bhi.n	80013c8 <HAL_I2C_Init+0x84>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4a80      	ldr	r2, [pc, #512]	@ (80015bc <HAL_I2C_Init+0x278>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	bf94      	ite	ls
 80013c0:	2301      	movls	r3, #1
 80013c2:	2300      	movhi	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	e006      	b.n	80013d6 <HAL_I2C_Init+0x92>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4a7d      	ldr	r2, [pc, #500]	@ (80015c0 <HAL_I2C_Init+0x27c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	bf94      	ite	ls
 80013d0:	2301      	movls	r3, #1
 80013d2:	2300      	movhi	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e0e7      	b.n	80015ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4a78      	ldr	r2, [pc, #480]	@ (80015c4 <HAL_I2C_Init+0x280>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0c9b      	lsrs	r3, r3, #18
 80013e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4a6a      	ldr	r2, [pc, #424]	@ (80015b8 <HAL_I2C_Init+0x274>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d802      	bhi.n	8001418 <HAL_I2C_Init+0xd4>
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3301      	adds	r3, #1
 8001416:	e009      	b.n	800142c <HAL_I2C_Init+0xe8>
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	4a69      	ldr	r2, [pc, #420]	@ (80015c8 <HAL_I2C_Init+0x284>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	099b      	lsrs	r3, r3, #6
 800142a:	3301      	adds	r3, #1
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	430b      	orrs	r3, r1
 8001432:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800143e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	495c      	ldr	r1, [pc, #368]	@ (80015b8 <HAL_I2C_Init+0x274>)
 8001448:	428b      	cmp	r3, r1
 800144a:	d819      	bhi.n	8001480 <HAL_I2C_Init+0x13c>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	1e59      	subs	r1, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fbb1 f3f3 	udiv	r3, r1, r3
 800145a:	1c59      	adds	r1, r3, #1
 800145c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001460:	400b      	ands	r3, r1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00a      	beq.n	800147c <HAL_I2C_Init+0x138>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1e59      	subs	r1, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fbb1 f3f3 	udiv	r3, r1, r3
 8001474:	3301      	adds	r3, #1
 8001476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147a:	e051      	b.n	8001520 <HAL_I2C_Init+0x1dc>
 800147c:	2304      	movs	r3, #4
 800147e:	e04f      	b.n	8001520 <HAL_I2C_Init+0x1dc>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d111      	bne.n	80014ac <HAL_I2C_Init+0x168>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e58      	subs	r0, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	440b      	add	r3, r1
 8001496:	fbb0 f3f3 	udiv	r3, r0, r3
 800149a:	3301      	adds	r3, #1
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf0c      	ite	eq
 80014a4:	2301      	moveq	r3, #1
 80014a6:	2300      	movne	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	e012      	b.n	80014d2 <HAL_I2C_Init+0x18e>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1e58      	subs	r0, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	0099      	lsls	r1, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf0c      	ite	eq
 80014cc:	2301      	moveq	r3, #1
 80014ce:	2300      	movne	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_Init+0x196>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e022      	b.n	8001520 <HAL_I2C_Init+0x1dc>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10e      	bne.n	8001500 <HAL_I2C_Init+0x1bc>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1e58      	subs	r0, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6859      	ldr	r1, [r3, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	440b      	add	r3, r1
 80014f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f4:	3301      	adds	r3, #1
 80014f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014fe:	e00f      	b.n	8001520 <HAL_I2C_Init+0x1dc>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	1e58      	subs	r0, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	0099      	lsls	r1, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	fbb0 f3f3 	udiv	r3, r0, r3
 8001516:	3301      	adds	r3, #1
 8001518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	6809      	ldr	r1, [r1, #0]
 8001524:	4313      	orrs	r3, r2
 8001526:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69da      	ldr	r2, [r3, #28]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800154e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6911      	ldr	r1, [r2, #16]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68d2      	ldr	r2, [r2, #12]
 800155a:	4311      	orrs	r1, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	430b      	orrs	r3, r1
 8001562:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2220      	movs	r2, #32
 800159a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	000186a0 	.word	0x000186a0
 80015bc:	001e847f 	.word	0x001e847f
 80015c0:	003d08ff 	.word	0x003d08ff
 80015c4:	431bde83 	.word	0x431bde83
 80015c8:	10624dd3 	.word	0x10624dd3

080015cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	461a      	mov	r2, r3
 80015d8:	460b      	mov	r3, r1
 80015da:	817b      	strh	r3, [r7, #10]
 80015dc:	4613      	mov	r3, r2
 80015de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff fbfe 	bl	8000de0 <HAL_GetTick>
 80015e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	f040 80e0 	bne.w	80017b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2319      	movs	r3, #25
 80015fa:	2201      	movs	r2, #1
 80015fc:	4970      	ldr	r1, [pc, #448]	@ (80017c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 fe0e 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800160a:	2302      	movs	r3, #2
 800160c:	e0d3      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_I2C_Master_Transmit+0x50>
 8001618:	2302      	movs	r3, #2
 800161a:	e0cc      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1ea>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b01      	cmp	r3, #1
 8001630:	d007      	beq.n	8001642 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0201 	orr.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001650:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2221      	movs	r2, #33	@ 0x21
 8001656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2210      	movs	r2, #16
 800165e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	893a      	ldrh	r2, [r7, #8]
 8001672:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001678:	b29a      	uxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4a50      	ldr	r2, [pc, #320]	@ (80017c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001682:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001684:	8979      	ldrh	r1, [r7, #10]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	6a3a      	ldr	r2, [r7, #32]
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 fbc8 	bl	8001e20 <I2C_MasterRequestWrite>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e08d      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016b0:	e066      	b.n	8001780 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	6a39      	ldr	r1, [r7, #32]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fecc 	bl	8002454 <I2C_WaitOnTXEFlagUntilTimeout>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00d      	beq.n	80016de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d107      	bne.n	80016da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e06b      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e2:	781a      	ldrb	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001706:	3b01      	subs	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b04      	cmp	r3, #4
 800171a:	d11b      	bne.n	8001754 <HAL_I2C_Master_Transmit+0x188>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	d017      	beq.n	8001754 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800173e:	b29b      	uxth	r3, r3
 8001740:	3b01      	subs	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	6a39      	ldr	r1, [r7, #32]
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 fec3 	bl	80024e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00d      	beq.n	8001780 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	2b04      	cmp	r3, #4
 800176a:	d107      	bne.n	800177c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800177a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e01a      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d194      	bne.n	80016b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2220      	movs	r2, #32
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e000      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017b4:	2302      	movs	r3, #2
  }
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	00100002 	.word	0x00100002
 80017c4:	ffff0000 	.word	0xffff0000

080017c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	4608      	mov	r0, r1
 80017d2:	4611      	mov	r1, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	817b      	strh	r3, [r7, #10]
 80017da:	460b      	mov	r3, r1
 80017dc:	813b      	strh	r3, [r7, #8]
 80017de:	4613      	mov	r3, r2
 80017e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017e2:	f7ff fafd 	bl	8000de0 <HAL_GetTick>
 80017e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b20      	cmp	r3, #32
 80017f2:	f040 80d9 	bne.w	80019a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2319      	movs	r3, #25
 80017fc:	2201      	movs	r2, #1
 80017fe:	496d      	ldr	r1, [pc, #436]	@ (80019b4 <HAL_I2C_Mem_Write+0x1ec>)
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 fd0d 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800180c:	2302      	movs	r3, #2
 800180e:	e0cc      	b.n	80019aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_I2C_Mem_Write+0x56>
 800181a:	2302      	movs	r3, #2
 800181c:	e0c5      	b.n	80019aa <HAL_I2C_Mem_Write+0x1e2>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	d007      	beq.n	8001844 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0201 	orr.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2221      	movs	r2, #33	@ 0x21
 8001858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2240      	movs	r2, #64	@ 0x40
 8001860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a3a      	ldr	r2, [r7, #32]
 800186e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001874:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800187a:	b29a      	uxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4a4d      	ldr	r2, [pc, #308]	@ (80019b8 <HAL_I2C_Mem_Write+0x1f0>)
 8001884:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001886:	88f8      	ldrh	r0, [r7, #6]
 8001888:	893a      	ldrh	r2, [r7, #8]
 800188a:	8979      	ldrh	r1, [r7, #10]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	4603      	mov	r3, r0
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 fb44 	bl	8001f24 <I2C_RequestMemoryWrite>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d052      	beq.n	8001948 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e081      	b.n	80019aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 fdd2 	bl	8002454 <I2C_WaitOnTXEFlagUntilTimeout>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00d      	beq.n	80018d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d107      	bne.n	80018ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e06b      	b.n	80019aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b04      	cmp	r3, #4
 800190e:	d11b      	bne.n	8001948 <HAL_I2C_Mem_Write+0x180>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001914:	2b00      	cmp	r3, #0
 8001916:	d017      	beq.n	8001948 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001932:	3b01      	subs	r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800193e:	b29b      	uxth	r3, r3
 8001940:	3b01      	subs	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1aa      	bne.n	80018a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 fdc5 	bl	80024e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	2b04      	cmp	r3, #4
 8001966:	d107      	bne.n	8001978 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001976:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e016      	b.n	80019aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800198a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	e000      	b.n	80019aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80019a8:	2302      	movs	r3, #2
  }
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	00100002 	.word	0x00100002
 80019b8:	ffff0000 	.word	0xffff0000

080019bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08c      	sub	sp, #48	@ 0x30
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	4608      	mov	r0, r1
 80019c6:	4611      	mov	r1, r2
 80019c8:	461a      	mov	r2, r3
 80019ca:	4603      	mov	r3, r0
 80019cc:	817b      	strh	r3, [r7, #10]
 80019ce:	460b      	mov	r3, r1
 80019d0:	813b      	strh	r3, [r7, #8]
 80019d2:	4613      	mov	r3, r2
 80019d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019d6:	f7ff fa03 	bl	8000de0 <HAL_GetTick>
 80019da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	f040 8214 	bne.w	8001e12 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2319      	movs	r3, #25
 80019f0:	2201      	movs	r2, #1
 80019f2:	497b      	ldr	r1, [pc, #492]	@ (8001be0 <HAL_I2C_Mem_Read+0x224>)
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 fc13 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001a00:	2302      	movs	r3, #2
 8001a02:	e207      	b.n	8001e14 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_I2C_Mem_Read+0x56>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e200      	b.n	8001e14 <HAL_I2C_Mem_Read+0x458>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d007      	beq.n	8001a38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2222      	movs	r2, #34	@ 0x22
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2240      	movs	r2, #64	@ 0x40
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4a5b      	ldr	r2, [pc, #364]	@ (8001be4 <HAL_I2C_Mem_Read+0x228>)
 8001a78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a7a:	88f8      	ldrh	r0, [r7, #6]
 8001a7c:	893a      	ldrh	r2, [r7, #8]
 8001a7e:	8979      	ldrh	r1, [r7, #10]
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	4603      	mov	r3, r0
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 fae0 	bl	8002050 <I2C_RequestMemoryRead>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e1bc      	b.n	8001e14 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d113      	bne.n	8001aca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	623b      	str	r3, [r7, #32]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	623b      	str	r3, [r7, #32]
 8001ab6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e190      	b.n	8001dec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d11b      	bne.n	8001b0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e170      	b.n	8001dec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d11b      	bne.n	8001b4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	61bb      	str	r3, [r7, #24]
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	e150      	b.n	8001dec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b60:	e144      	b.n	8001dec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	f200 80f1 	bhi.w	8001d4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d123      	bne.n	8001bbc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 fcfb 	bl	8002574 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e145      	b.n	8001e14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bba:	e117      	b.n	8001dec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d14e      	bne.n	8001c62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bca:	2200      	movs	r2, #0
 8001bcc:	4906      	ldr	r1, [pc, #24]	@ (8001be8 <HAL_I2C_Mem_Read+0x22c>)
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 fb26 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d008      	beq.n	8001bec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e11a      	b.n	8001e14 <HAL_I2C_Mem_Read+0x458>
 8001bde:	bf00      	nop
 8001be0:	00100002 	.word	0x00100002
 8001be4:	ffff0000 	.word	0xffff0000
 8001be8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c60:	e0c4      	b.n	8001dec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c68:	2200      	movs	r2, #0
 8001c6a:	496c      	ldr	r1, [pc, #432]	@ (8001e1c <HAL_I2C_Mem_Read+0x460>)
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fad7 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0cb      	b.n	8001e14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4955      	ldr	r1, [pc, #340]	@ (8001e1c <HAL_I2C_Mem_Read+0x460>)
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 faa9 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e09d      	b.n	8001e14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d4c:	e04e      	b.n	8001dec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 fc0e 	bl	8002574 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e058      	b.n	8001e14 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d124      	bne.n	8001dec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d107      	bne.n	8001dba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001db8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f47f aeb6 	bne.w	8001b62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
  }
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3728      	adds	r7, #40	@ 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	00010004 	.word	0x00010004

08001e20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d006      	beq.n	8001e4a <I2C_MasterRequestWrite+0x2a>
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d003      	beq.n	8001e4a <I2C_MasterRequestWrite+0x2a>
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e48:	d108      	bne.n	8001e5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e00b      	b.n	8001e74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e60:	2b12      	cmp	r3, #18
 8001e62:	d107      	bne.n	8001e74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 f9cd 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00d      	beq.n	8001ea8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e9a:	d103      	bne.n	8001ea4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ea2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e035      	b.n	8001f14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001eb0:	d108      	bne.n	8001ec4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eb2:	897b      	ldrh	r3, [r7, #10]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ec0:	611a      	str	r2, [r3, #16]
 8001ec2:	e01b      	b.n	8001efc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ec4:	897b      	ldrh	r3, [r7, #10]
 8001ec6:	11db      	asrs	r3, r3, #7
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	f003 0306 	and.w	r3, r3, #6
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f063 030f 	orn	r3, r3, #15
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	490e      	ldr	r1, [pc, #56]	@ (8001f1c <I2C_MasterRequestWrite+0xfc>)
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 fa16 	bl	8002314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e010      	b.n	8001f14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ef2:	897b      	ldrh	r3, [r7, #10]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4907      	ldr	r1, [pc, #28]	@ (8001f20 <I2C_MasterRequestWrite+0x100>)
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 fa06 	bl	8002314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	00010008 	.word	0x00010008
 8001f20:	00010002 	.word	0x00010002

08001f24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	4611      	mov	r1, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	817b      	strh	r3, [r7, #10]
 8001f36:	460b      	mov	r3, r1
 8001f38:	813b      	strh	r3, [r7, #8]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f960 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00d      	beq.n	8001f82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f74:	d103      	bne.n	8001f7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e05f      	b.n	8002042 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f82:	897b      	ldrh	r3, [r7, #10]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	6a3a      	ldr	r2, [r7, #32]
 8001f96:	492d      	ldr	r1, [pc, #180]	@ (800204c <I2C_RequestMemoryWrite+0x128>)
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 f9bb 	bl	8002314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e04c      	b.n	8002042 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc0:	6a39      	ldr	r1, [r7, #32]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 fa46 	bl	8002454 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00d      	beq.n	8001fea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d107      	bne.n	8001fe6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e02b      	b.n	8002042 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ff0:	893b      	ldrh	r3, [r7, #8]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	611a      	str	r2, [r3, #16]
 8001ffa:	e021      	b.n	8002040 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ffc:	893b      	ldrh	r3, [r7, #8]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	b29b      	uxth	r3, r3
 8002002:	b2da      	uxtb	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800200a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800200c:	6a39      	ldr	r1, [r7, #32]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fa20 	bl	8002454 <I2C_WaitOnTXEFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00d      	beq.n	8002036 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	2b04      	cmp	r3, #4
 8002020:	d107      	bne.n	8002032 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002030:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e005      	b.n	8002042 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002036:	893b      	ldrh	r3, [r7, #8]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	00010002 	.word	0x00010002

08002050 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af02      	add	r7, sp, #8
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	4608      	mov	r0, r1
 800205a:	4611      	mov	r1, r2
 800205c:	461a      	mov	r2, r3
 800205e:	4603      	mov	r3, r0
 8002060:	817b      	strh	r3, [r7, #10]
 8002062:	460b      	mov	r3, r1
 8002064:	813b      	strh	r3, [r7, #8]
 8002066:	4613      	mov	r3, r2
 8002068:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002078:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002088:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	2200      	movs	r2, #0
 8002092:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f8c2 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00d      	beq.n	80020be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020b0:	d103      	bne.n	80020ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0aa      	b.n	8002214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020be:	897b      	ldrh	r3, [r7, #10]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	6a3a      	ldr	r2, [r7, #32]
 80020d2:	4952      	ldr	r1, [pc, #328]	@ (800221c <I2C_RequestMemoryRead+0x1cc>)
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f91d 	bl	8002314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e097      	b.n	8002214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020fc:	6a39      	ldr	r1, [r7, #32]
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f9a8 	bl	8002454 <I2C_WaitOnTXEFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00d      	beq.n	8002126 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	2b04      	cmp	r3, #4
 8002110:	d107      	bne.n	8002122 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002120:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e076      	b.n	8002214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800212c:	893b      	ldrh	r3, [r7, #8]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	611a      	str	r2, [r3, #16]
 8002136:	e021      	b.n	800217c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002138:	893b      	ldrh	r3, [r7, #8]
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	b29b      	uxth	r3, r3
 800213e:	b2da      	uxtb	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002148:	6a39      	ldr	r1, [r7, #32]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 f982 	bl	8002454 <I2C_WaitOnTXEFlagUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00d      	beq.n	8002172 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	2b04      	cmp	r3, #4
 800215c:	d107      	bne.n	800216e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800216c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e050      	b.n	8002214 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002172:	893b      	ldrh	r3, [r7, #8]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800217c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217e:	6a39      	ldr	r1, [r7, #32]
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 f967 	bl	8002454 <I2C_WaitOnTXEFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	2b04      	cmp	r3, #4
 8002192:	d107      	bne.n	80021a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e035      	b.n	8002214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	2200      	movs	r2, #0
 80021c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 f82b 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00d      	beq.n	80021ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021de:	d103      	bne.n	80021e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e013      	b.n	8002214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021ec:	897b      	ldrh	r3, [r7, #10]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	6a3a      	ldr	r2, [r7, #32]
 8002200:	4906      	ldr	r1, [pc, #24]	@ (800221c <I2C_RequestMemoryRead+0x1cc>)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f886 	bl	8002314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	00010002 	.word	0x00010002

08002220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	4613      	mov	r3, r2
 800222e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002230:	e048      	b.n	80022c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d044      	beq.n	80022c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800223a:	f7fe fdd1 	bl	8000de0 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d302      	bcc.n	8002250 <I2C_WaitOnFlagUntilTimeout+0x30>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d139      	bne.n	80022c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	0c1b      	lsrs	r3, r3, #16
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d10d      	bne.n	8002276 <I2C_WaitOnFlagUntilTimeout+0x56>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	43da      	mvns	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	4013      	ands	r3, r2
 8002266:	b29b      	uxth	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	e00c      	b.n	8002290 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	43da      	mvns	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4013      	ands	r3, r2
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	429a      	cmp	r2, r3
 8002294:	d116      	bne.n	80022c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	f043 0220 	orr.w	r2, r3, #32
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e023      	b.n	800230c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	0c1b      	lsrs	r3, r3, #16
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d10d      	bne.n	80022ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	43da      	mvns	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4013      	ands	r3, r2
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	e00c      	b.n	8002304 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	43da      	mvns	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4013      	ands	r3, r2
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	429a      	cmp	r2, r3
 8002308:	d093      	beq.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002322:	e071      	b.n	8002408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002332:	d123      	bne.n	800237c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002342:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800234c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	f043 0204 	orr.w	r2, r3, #4
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e067      	b.n	800244c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002382:	d041      	beq.n	8002408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002384:	f7fe fd2c 	bl	8000de0 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	d302      	bcc.n	800239a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d136      	bne.n	8002408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	0c1b      	lsrs	r3, r3, #16
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d10c      	bne.n	80023be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4013      	ands	r3, r2
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	bf14      	ite	ne
 80023b6:	2301      	movne	r3, #1
 80023b8:	2300      	moveq	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	e00b      	b.n	80023d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	43da      	mvns	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	4013      	ands	r3, r2
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf14      	ite	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	2300      	moveq	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d016      	beq.n	8002408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e021      	b.n	800244c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	0c1b      	lsrs	r3, r3, #16
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d10c      	bne.n	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	43da      	mvns	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4013      	ands	r3, r2
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	e00b      	b.n	8002444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	43da      	mvns	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4013      	ands	r3, r2
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	bf14      	ite	ne
 800243e:	2301      	movne	r3, #1
 8002440:	2300      	moveq	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	f47f af6d 	bne.w	8002324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002460:	e034      	b.n	80024cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f8e3 	bl	800262e <I2C_IsAcknowledgeFailed>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e034      	b.n	80024dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d028      	beq.n	80024cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247a:	f7fe fcb1 	bl	8000de0 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	429a      	cmp	r2, r3
 8002488:	d302      	bcc.n	8002490 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d11d      	bne.n	80024cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249a:	2b80      	cmp	r3, #128	@ 0x80
 800249c:	d016      	beq.n	80024cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b8:	f043 0220 	orr.w	r2, r3, #32
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e007      	b.n	80024dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d6:	2b80      	cmp	r3, #128	@ 0x80
 80024d8:	d1c3      	bne.n	8002462 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024f0:	e034      	b.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f89b 	bl	800262e <I2C_IsAcknowledgeFailed>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e034      	b.n	800256c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d028      	beq.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250a:	f7fe fc69 	bl	8000de0 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d11d      	bne.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b04      	cmp	r3, #4
 800252c:	d016      	beq.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e007      	b.n	800256c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d1c3      	bne.n	80024f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002580:	e049      	b.n	8002616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b10      	cmp	r3, #16
 800258e:	d119      	bne.n	80025c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0210 	mvn.w	r2, #16
 8002598:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e030      	b.n	8002626 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c4:	f7fe fc0c 	bl	8000de0 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d302      	bcc.n	80025da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d11d      	bne.n	8002616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e4:	2b40      	cmp	r3, #64	@ 0x40
 80025e6:	d016      	beq.n	8002616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f043 0220 	orr.w	r2, r3, #32
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e007      	b.n	8002626 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002620:	2b40      	cmp	r3, #64	@ 0x40
 8002622:	d1ae      	bne.n	8002582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002644:	d11b      	bne.n	800267e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800264e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f043 0204 	orr.w	r2, r3, #4
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e267      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d075      	beq.n	8002796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026aa:	4b88      	ldr	r3, [pc, #544]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d00c      	beq.n	80026d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b6:	4b85      	ldr	r3, [pc, #532]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d112      	bne.n	80026e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c2:	4b82      	ldr	r3, [pc, #520]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ce:	d10b      	bne.n	80026e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	4b7e      	ldr	r3, [pc, #504]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d05b      	beq.n	8002794 <HAL_RCC_OscConfig+0x108>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d157      	bne.n	8002794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e242      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f0:	d106      	bne.n	8002700 <HAL_RCC_OscConfig+0x74>
 80026f2:	4b76      	ldr	r3, [pc, #472]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a75      	ldr	r2, [pc, #468]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e01d      	b.n	800273c <HAL_RCC_OscConfig+0xb0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x98>
 800270a:	4b70      	ldr	r3, [pc, #448]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6f      	ldr	r2, [pc, #444]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b6d      	ldr	r3, [pc, #436]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a6c      	ldr	r2, [pc, #432]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0xb0>
 8002724:	4b69      	ldr	r3, [pc, #420]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a68      	ldr	r2, [pc, #416]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b66      	ldr	r3, [pc, #408]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a65      	ldr	r2, [pc, #404]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800273a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe fb4c 	bl	8000de0 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7fe fb48 	bl	8000de0 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	@ 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e207      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b5b      	ldr	r3, [pc, #364]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0xc0>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe fb38 	bl	8000de0 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7fe fb34 	bl	8000de0 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	@ 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1f3      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	4b51      	ldr	r3, [pc, #324]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0xe8>
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d063      	beq.n	800286a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027a2:	4b4a      	ldr	r3, [pc, #296]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b47      	ldr	r3, [pc, #284]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d11c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ba:	4b44      	ldr	r3, [pc, #272]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d116      	bne.n	80027f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	4b41      	ldr	r3, [pc, #260]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x152>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e1c7      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027de:	4b3b      	ldr	r3, [pc, #236]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4937      	ldr	r1, [pc, #220]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	e03a      	b.n	800286a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027fc:	4b34      	ldr	r3, [pc, #208]	@ (80028d0 <HAL_RCC_OscConfig+0x244>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7fe faed 	bl	8000de0 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280a:	f7fe fae9 	bl	8000de0 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1a8      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4925      	ldr	r1, [pc, #148]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
 800283c:	e015      	b.n	800286a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283e:	4b24      	ldr	r3, [pc, #144]	@ (80028d0 <HAL_RCC_OscConfig+0x244>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe facc 	bl	8000de0 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284c:	f7fe fac8 	bl	8000de0 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e187      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d036      	beq.n	80028e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287e:	4b15      	ldr	r3, [pc, #84]	@ (80028d4 <HAL_RCC_OscConfig+0x248>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe faac 	bl	8000de0 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288c:	f7fe faa8 	bl	8000de0 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e167      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80028a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x200>
 80028aa:	e01b      	b.n	80028e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_RCC_OscConfig+0x248>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b2:	f7fe fa95 	bl	8000de0 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b8:	e00e      	b.n	80028d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ba:	f7fe fa91 	bl	8000de0 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d907      	bls.n	80028d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e150      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	42470000 	.word	0x42470000
 80028d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b88      	ldr	r3, [pc, #544]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 80028da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ea      	bne.n	80028ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8097 	beq.w	8002a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b81      	ldr	r3, [pc, #516]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10f      	bne.n	8002922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	4b7d      	ldr	r3, [pc, #500]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	4a7c      	ldr	r2, [pc, #496]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002910:	6413      	str	r3, [r2, #64]	@ 0x40
 8002912:	4b7a      	ldr	r3, [pc, #488]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4b77      	ldr	r3, [pc, #476]	@ (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d118      	bne.n	8002960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292e:	4b74      	ldr	r3, [pc, #464]	@ (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a73      	ldr	r2, [pc, #460]	@ (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293a:	f7fe fa51 	bl	8000de0 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7fe fa4d 	bl	8000de0 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e10c      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	4b6a      	ldr	r3, [pc, #424]	@ (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x2ea>
 8002968:	4b64      	ldr	r3, [pc, #400]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	4a63      	ldr	r2, [pc, #396]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70
 8002974:	e01c      	b.n	80029b0 <HAL_RCC_OscConfig+0x324>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0x30c>
 800297e:	4b5f      	ldr	r3, [pc, #380]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002982:	4a5e      	ldr	r2, [pc, #376]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6713      	str	r3, [r2, #112]	@ 0x70
 800298a:	4b5c      	ldr	r3, [pc, #368]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298e:	4a5b      	ldr	r2, [pc, #364]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6713      	str	r3, [r2, #112]	@ 0x70
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0x324>
 8002998:	4b58      	ldr	r3, [pc, #352]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a57      	ldr	r2, [pc, #348]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a4:	4b55      	ldr	r3, [pc, #340]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	4a54      	ldr	r2, [pc, #336]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe fa12 	bl	8000de0 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7fe fa0e 	bl	8000de0 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0cb      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d6:	4b49      	ldr	r3, [pc, #292]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ee      	beq.n	80029c0 <HAL_RCC_OscConfig+0x334>
 80029e2:	e014      	b.n	8002a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7fe f9fc 	bl	8000de0 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe f9f8 	bl	8000de0 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0b5      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a02:	4b3e      	ldr	r3, [pc, #248]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ee      	bne.n	80029ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a14:	4b39      	ldr	r3, [pc, #228]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	4a38      	ldr	r2, [pc, #224]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80a1 	beq.w	8002b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a2a:	4b34      	ldr	r3, [pc, #208]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d05c      	beq.n	8002af0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d141      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b31      	ldr	r3, [pc, #196]	@ (8002b04 <HAL_RCC_OscConfig+0x478>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe f9cc 	bl	8000de0 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe f9c8 	bl	8000de0 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e087      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	4b27      	ldr	r3, [pc, #156]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	019b      	lsls	r3, r3, #6
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	3b01      	subs	r3, #1
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	491b      	ldr	r1, [pc, #108]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a94:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <HAL_RCC_OscConfig+0x478>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe f9a1 	bl	8000de0 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe f99d 	bl	8000de0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e05c      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab4:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x416>
 8002ac0:	e054      	b.n	8002b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <HAL_RCC_OscConfig+0x478>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe f98a 	bl	8000de0 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe f986 	bl	8000de0 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e045      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x444>
 8002aee:	e03d      	b.n	8002b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d107      	bne.n	8002b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e038      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40007000 	.word	0x40007000
 8002b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	@ (8002b78 <HAL_RCC_OscConfig+0x4ec>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d028      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d121      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d11a      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d111      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3b01      	subs	r3, #1
 8002b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d107      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800

08002b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0cc      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b90:	4b68      	ldr	r3, [pc, #416]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d90c      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b65      	ldr	r3, [pc, #404]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b63      	ldr	r3, [pc, #396]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0b8      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd0:	4b59      	ldr	r3, [pc, #356]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a58      	ldr	r2, [pc, #352]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be8:	4b53      	ldr	r3, [pc, #332]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a52      	ldr	r2, [pc, #328]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b50      	ldr	r3, [pc, #320]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	494d      	ldr	r1, [pc, #308]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d044      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	4b47      	ldr	r3, [pc, #284]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d119      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e07f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e067      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5a:	4b37      	ldr	r3, [pc, #220]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f023 0203 	bic.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4934      	ldr	r1, [pc, #208]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe f8b8 	bl	8000de0 <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fe f8b4 	bl	8000de0 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e04f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 020c 	and.w	r2, r3, #12
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1eb      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b25      	ldr	r3, [pc, #148]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d20c      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b22      	ldr	r3, [pc, #136]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b20      	ldr	r3, [pc, #128]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e032      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd0:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4916      	ldr	r1, [pc, #88]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cee:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	490e      	ldr	r1, [pc, #56]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d02:	f000 f821 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002d06:	4602      	mov	r2, r0
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	490a      	ldr	r1, [pc, #40]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	5ccb      	ldrb	r3, [r1, r3]
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	4a09      	ldr	r2, [pc, #36]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d1e:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe f818 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023c00 	.word	0x40023c00
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	08003008 	.word	0x08003008
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000004 	.word	0x20000004

08002d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d4c:	b094      	sub	sp, #80	@ 0x50
 8002d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d60:	4b79      	ldr	r3, [pc, #484]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d00d      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0x40>
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	f200 80e1 	bhi.w	8002f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x34>
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d003      	beq.n	8002d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d7a:	e0db      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b73      	ldr	r3, [pc, #460]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d80:	e0db      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d82:	4b73      	ldr	r3, [pc, #460]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d86:	e0d8      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d88:	4b6f      	ldr	r3, [pc, #444]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d92:	4b6d      	ldr	r3, [pc, #436]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d063      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	2200      	movs	r2, #0
 8002da6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002da8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002db2:	2300      	movs	r3, #0
 8002db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002dba:	4622      	mov	r2, r4
 8002dbc:	462b      	mov	r3, r5
 8002dbe:	f04f 0000 	mov.w	r0, #0
 8002dc2:	f04f 0100 	mov.w	r1, #0
 8002dc6:	0159      	lsls	r1, r3, #5
 8002dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dcc:	0150      	lsls	r0, r2, #5
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	1a51      	subs	r1, r2, r1
 8002dd6:	6139      	str	r1, [r7, #16]
 8002dd8:	4629      	mov	r1, r5
 8002dda:	eb63 0301 	sbc.w	r3, r3, r1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dec:	4659      	mov	r1, fp
 8002dee:	018b      	lsls	r3, r1, #6
 8002df0:	4651      	mov	r1, sl
 8002df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002df6:	4651      	mov	r1, sl
 8002df8:	018a      	lsls	r2, r1, #6
 8002dfa:	4651      	mov	r1, sl
 8002dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8002e00:	4659      	mov	r1, fp
 8002e02:	eb63 0901 	sbc.w	r9, r3, r1
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e1a:	4690      	mov	r8, r2
 8002e1c:	4699      	mov	r9, r3
 8002e1e:	4623      	mov	r3, r4
 8002e20:	eb18 0303 	adds.w	r3, r8, r3
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	462b      	mov	r3, r5
 8002e28:	eb49 0303 	adc.w	r3, r9, r3
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	024b      	lsls	r3, r1, #9
 8002e3e:	4621      	mov	r1, r4
 8002e40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e44:	4621      	mov	r1, r4
 8002e46:	024a      	lsls	r2, r1, #9
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e4e:	2200      	movs	r2, #0
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e58:	f7fd f9b6 	bl	80001c8 <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4613      	mov	r3, r2
 8002e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e64:	e058      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e66:	4b38      	ldr	r3, [pc, #224]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	099b      	lsrs	r3, r3, #6
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	4611      	mov	r1, r2
 8002e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e80:	4642      	mov	r2, r8
 8002e82:	464b      	mov	r3, r9
 8002e84:	f04f 0000 	mov.w	r0, #0
 8002e88:	f04f 0100 	mov.w	r1, #0
 8002e8c:	0159      	lsls	r1, r3, #5
 8002e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e92:	0150      	lsls	r0, r2, #5
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4641      	mov	r1, r8
 8002e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8002ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	00eb      	lsls	r3, r5, #3
 8002eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ece:	00e2      	lsls	r2, r4, #3
 8002ed0:	4614      	mov	r4, r2
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	4643      	mov	r3, r8
 8002ed6:	18e3      	adds	r3, r4, r3
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	464b      	mov	r3, r9
 8002edc:	eb45 0303 	adc.w	r3, r5, r3
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eee:	4629      	mov	r1, r5
 8002ef0:	028b      	lsls	r3, r1, #10
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef8:	4621      	mov	r1, r4
 8002efa:	028a      	lsls	r2, r1, #10
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f02:	2200      	movs	r2, #0
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	61fa      	str	r2, [r7, #28]
 8002f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f0c:	f7fd f95c 	bl	80001c8 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4613      	mov	r3, r2
 8002f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	3301      	adds	r3, #1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f32:	e002      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f34:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3750      	adds	r7, #80	@ 0x50
 8002f40:	46bd      	mov	sp, r7
 8002f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	00f42400 	.word	0x00f42400
 8002f50:	007a1200 	.word	0x007a1200

08002f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f58:	4b03      	ldr	r3, [pc, #12]	@ (8002f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000000 	.word	0x20000000

08002f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f70:	f7ff fff0 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	0a9b      	lsrs	r3, r3, #10
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4903      	ldr	r1, [pc, #12]	@ (8002f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	08003018 	.word	0x08003018

08002f94 <memset>:
 8002f94:	4402      	add	r2, r0
 8002f96:	4603      	mov	r3, r0
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d100      	bne.n	8002f9e <memset+0xa>
 8002f9c:	4770      	bx	lr
 8002f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002fa2:	e7f9      	b.n	8002f98 <memset+0x4>

08002fa4 <__libc_init_array>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	4d0d      	ldr	r5, [pc, #52]	@ (8002fdc <__libc_init_array+0x38>)
 8002fa8:	4c0d      	ldr	r4, [pc, #52]	@ (8002fe0 <__libc_init_array+0x3c>)
 8002faa:	1b64      	subs	r4, r4, r5
 8002fac:	10a4      	asrs	r4, r4, #2
 8002fae:	2600      	movs	r6, #0
 8002fb0:	42a6      	cmp	r6, r4
 8002fb2:	d109      	bne.n	8002fc8 <__libc_init_array+0x24>
 8002fb4:	4d0b      	ldr	r5, [pc, #44]	@ (8002fe4 <__libc_init_array+0x40>)
 8002fb6:	4c0c      	ldr	r4, [pc, #48]	@ (8002fe8 <__libc_init_array+0x44>)
 8002fb8:	f000 f818 	bl	8002fec <_init>
 8002fbc:	1b64      	subs	r4, r4, r5
 8002fbe:	10a4      	asrs	r4, r4, #2
 8002fc0:	2600      	movs	r6, #0
 8002fc2:	42a6      	cmp	r6, r4
 8002fc4:	d105      	bne.n	8002fd2 <__libc_init_array+0x2e>
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
 8002fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fcc:	4798      	blx	r3
 8002fce:	3601      	adds	r6, #1
 8002fd0:	e7ee      	b.n	8002fb0 <__libc_init_array+0xc>
 8002fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd6:	4798      	blx	r3
 8002fd8:	3601      	adds	r6, #1
 8002fda:	e7f2      	b.n	8002fc2 <__libc_init_array+0x1e>
 8002fdc:	08003028 	.word	0x08003028
 8002fe0:	08003028 	.word	0x08003028
 8002fe4:	08003028 	.word	0x08003028
 8002fe8:	0800302c 	.word	0x0800302c

08002fec <_init>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	bf00      	nop
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr

08002ff8 <_fini>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr
