
DS3231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000288c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002a14  08002a14  00003a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a2c  08002a2c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a2c  08002a2c  00003a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a34  08002a34  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a34  08002a34  00003a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a38  08002a38  00003a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000090  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000662e  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000128c  00000000  00000000  0000a66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  0000b8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054c  00000000  00000000  0000bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f354  00000000  00000000  0000c52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c42  00000000  00000000  0002b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bed32  00000000  00000000  000344c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f31f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c14  00000000  00000000  000f3238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000f4e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080029fc 	.word	0x080029fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080029fc 	.word	0x080029fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <decToBcd.1>:
int main(void)
{

  /* USER CODE BEGIN 1 */
	uint8_t decToBcd(int val)
	{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	f8c7 c000 	str.w	ip, [r7]
	  return (uint8_t)( (val/10*16) + (val%10) );
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000504 <decToBcd.1+0x4c>)
 80004c8:	fb82 1203 	smull	r1, r2, r2, r3
 80004cc:	1092      	asrs	r2, r2, #2
 80004ce:	17db      	asrs	r3, r3, #31
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	011b      	lsls	r3, r3, #4
 80004d6:	b2d8      	uxtb	r0, r3
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <decToBcd.1+0x4c>)
 80004dc:	fb83 1302 	smull	r1, r3, r3, r2
 80004e0:	1099      	asrs	r1, r3, #2
 80004e2:	17d3      	asrs	r3, r2, #31
 80004e4:	1ac9      	subs	r1, r1, r3
 80004e6:	460b      	mov	r3, r1
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	440b      	add	r3, r1
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	1ad1      	subs	r1, r2, r3
 80004f0:	b2cb      	uxtb	r3, r1
 80004f2:	4403      	add	r3, r0
 80004f4:	b2db      	uxtb	r3, r3
	}
 80004f6:	4618      	mov	r0, r3
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	66666667 	.word	0x66666667

08000508 <main>:
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af04      	add	r7, sp, #16
int main(void)
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fa86 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f8f0 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f986 	bl	800082c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000520:	f000 f956 	bl	80007d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 // DS3231_Init();
  Set_Time(56, 59, 11, 5, 3, 1, 19);
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2213      	movs	r2, #19
 8000528:	9202      	str	r2, [sp, #8]
 800052a:	2201      	movs	r2, #1
 800052c:	9201      	str	r2, [sp, #4]
 800052e:	2203      	movs	r2, #3
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	469c      	mov	ip, r3
 8000534:	2305      	movs	r3, #5
 8000536:	220b      	movs	r2, #11
 8000538:	213b      	movs	r1, #59	@ 0x3b
 800053a:	2038      	movs	r0, #56	@ 0x38
 800053c:	f000 f824 	bl	8000588 <Set_Time.0>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  Get_Time();
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	469c      	mov	ip, r3
 8000544:	f000 f87a 	bl	800063c <Get_Time.2>
	  HAL_Delay(1000);
 8000548:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800054c:	f000 fadc 	bl	8000b08 <HAL_Delay>
	  Get_Time();
 8000550:	bf00      	nop
 8000552:	e7f5      	b.n	8000540 <main+0x38>

08000554 <bcdToDec.3>:
	{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
 800055e:	f8c7 c000 	str.w	ip, [r7]
	  return (int)( (val/16*10) + (val%16) );
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	091b      	lsrs	r3, r3, #4
 8000566:	b2db      	uxtb	r3, r3
 8000568:	461a      	mov	r2, r3
 800056a:	4613      	mov	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4413      	add	r3, r2
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	461a      	mov	r2, r3
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f003 030f 	and.w	r3, r3, #15
 800057a:	4413      	add	r3, r2
	}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <Set_Time.0>:
	{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b089      	sub	sp, #36	@ 0x24
 800058c:	af04      	add	r7, sp, #16
 800058e:	4604      	mov	r4, r0
 8000590:	4608      	mov	r0, r1
 8000592:	4611      	mov	r1, r2
 8000594:	461a      	mov	r2, r3
 8000596:	4623      	mov	r3, r4
 8000598:	71fb      	strb	r3, [r7, #7]
 800059a:	4603      	mov	r3, r0
 800059c:	71bb      	strb	r3, [r7, #6]
 800059e:	460b      	mov	r3, r1
 80005a0:	717b      	strb	r3, [r7, #5]
 80005a2:	4613      	mov	r3, r2
 80005a4:	713b      	strb	r3, [r7, #4]
 80005a6:	4664      	mov	r4, ip
 80005a8:	f8c7 c000 	str.w	ip, [r7]
		set_time[0] = decToBcd(sec);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	46a4      	mov	ip, r4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ff81 	bl	80004b8 <decToBcd.1>
 80005b6:	4603      	mov	r3, r0
 80005b8:	723b      	strb	r3, [r7, #8]
		set_time[1] = decToBcd(min);
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	46a4      	mov	ip, r4
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ff7a 	bl	80004b8 <decToBcd.1>
 80005c4:	4603      	mov	r3, r0
 80005c6:	727b      	strb	r3, [r7, #9]
		set_time[2] = decToBcd(hour);
 80005c8:	797b      	ldrb	r3, [r7, #5]
 80005ca:	46a4      	mov	ip, r4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ff73 	bl	80004b8 <decToBcd.1>
 80005d2:	4603      	mov	r3, r0
 80005d4:	72bb      	strb	r3, [r7, #10]
		set_time[3] = decToBcd(dow);
 80005d6:	793b      	ldrb	r3, [r7, #4]
 80005d8:	46a4      	mov	ip, r4
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ff6c 	bl	80004b8 <decToBcd.1>
 80005e0:	4603      	mov	r3, r0
 80005e2:	72fb      	strb	r3, [r7, #11]
		set_time[4] = decToBcd(dom);
 80005e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005e8:	46a4      	mov	ip, r4
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff64 	bl	80004b8 <decToBcd.1>
 80005f0:	4603      	mov	r3, r0
 80005f2:	733b      	strb	r3, [r7, #12]
		set_time[5] = decToBcd(month);
 80005f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80005f8:	46a4      	mov	ip, r4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff5c 	bl	80004b8 <decToBcd.1>
 8000600:	4603      	mov	r3, r0
 8000602:	737b      	strb	r3, [r7, #13]
		set_time[6] = decToBcd(year);
 8000604:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000608:	46a4      	mov	ip, r4
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff54 	bl	80004b8 <decToBcd.1>
 8000610:	4603      	mov	r3, r0
 8000612:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 100);
 8000614:	2364      	movs	r3, #100	@ 0x64
 8000616:	9302      	str	r3, [sp, #8]
 8000618:	2307      	movs	r3, #7
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2301      	movs	r3, #1
 8000624:	2200      	movs	r2, #0
 8000626:	21d0      	movs	r1, #208	@ 0xd0
 8000628:	4803      	ldr	r0, [pc, #12]	@ (8000638 <Set_Time.0+0xb0>)
 800062a:	f000 fe57 	bl	80012dc <HAL_I2C_Mem_Write>
	}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	bd90      	pop	{r4, r7, pc}
 8000636:	bf00      	nop
 8000638:	20000028 	.word	0x20000028

0800063c <Get_Time.2>:
	{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b089      	sub	sp, #36	@ 0x24
 8000640:	af04      	add	r7, sp, #16
 8000642:	4664      	mov	r4, ip
 8000644:	f8c7 c004 	str.w	ip, [r7, #4]
		HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 100);
 8000648:	2364      	movs	r3, #100	@ 0x64
 800064a:	9302      	str	r3, [sp, #8]
 800064c:	2307      	movs	r3, #7
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	2200      	movs	r2, #0
 800065a:	21d0      	movs	r1, #208	@ 0xd0
 800065c:	481f      	ldr	r0, [pc, #124]	@ (80006dc <Get_Time.2+0xa0>)
 800065e:	f000 ff37 	bl	80014d0 <HAL_I2C_Mem_Read>
		seconds = bcdToDec(get_time[0]);
 8000662:	7a3b      	ldrb	r3, [r7, #8]
 8000664:	46a4      	mov	ip, r4
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff74 	bl	8000554 <bcdToDec.3>
 800066c:	4603      	mov	r3, r0
 800066e:	4a1c      	ldr	r2, [pc, #112]	@ (80006e0 <Get_Time.2+0xa4>)
 8000670:	6013      	str	r3, [r2, #0]
		minutes = bcdToDec(get_time[1]);
 8000672:	7a7b      	ldrb	r3, [r7, #9]
 8000674:	46a4      	mov	ip, r4
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff6c 	bl	8000554 <bcdToDec.3>
 800067c:	4603      	mov	r3, r0
 800067e:	4a19      	ldr	r2, [pc, #100]	@ (80006e4 <Get_Time.2+0xa8>)
 8000680:	6013      	str	r3, [r2, #0]
		hour = bcdToDec(get_time[2]);
 8000682:	7abb      	ldrb	r3, [r7, #10]
 8000684:	46a4      	mov	ip, r4
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff64 	bl	8000554 <bcdToDec.3>
 800068c:	4603      	mov	r3, r0
 800068e:	4a16      	ldr	r2, [pc, #88]	@ (80006e8 <Get_Time.2+0xac>)
 8000690:	6013      	str	r3, [r2, #0]
		dayofweek = bcdToDec(get_time[3]);
 8000692:	7afb      	ldrb	r3, [r7, #11]
 8000694:	46a4      	mov	ip, r4
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff5c 	bl	8000554 <bcdToDec.3>
 800069c:	4603      	mov	r3, r0
 800069e:	4a13      	ldr	r2, [pc, #76]	@ (80006ec <Get_Time.2+0xb0>)
 80006a0:	6013      	str	r3, [r2, #0]
		dayofmonth = bcdToDec(get_time[4]);
 80006a2:	7b3b      	ldrb	r3, [r7, #12]
 80006a4:	46a4      	mov	ip, r4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff54 	bl	8000554 <bcdToDec.3>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a10      	ldr	r2, [pc, #64]	@ (80006f0 <Get_Time.2+0xb4>)
 80006b0:	6013      	str	r3, [r2, #0]
		month = bcdToDec(get_time[5]);
 80006b2:	7b7b      	ldrb	r3, [r7, #13]
 80006b4:	46a4      	mov	ip, r4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff4c 	bl	8000554 <bcdToDec.3>
 80006bc:	4603      	mov	r3, r0
 80006be:	4a0d      	ldr	r2, [pc, #52]	@ (80006f4 <Get_Time.2+0xb8>)
 80006c0:	6013      	str	r3, [r2, #0]
		year = bcdToDec(get_time[6]);
 80006c2:	7bbb      	ldrb	r3, [r7, #14]
 80006c4:	46a4      	mov	ip, r4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff44 	bl	8000554 <bcdToDec.3>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <Get_Time.2+0xbc>)
 80006d0:	6013      	str	r3, [r2, #0]
	}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd90      	pop	{r4, r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000028 	.word	0x20000028
 80006e0:	2000007c 	.word	0x2000007c
 80006e4:	20000080 	.word	0x20000080
 80006e8:	20000084 	.word	0x20000084
 80006ec:	20000088 	.word	0x20000088
 80006f0:	2000008c 	.word	0x2000008c
 80006f4:	20000090 	.word	0x20000090
 80006f8:	20000094 	.word	0x20000094

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	@ 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f002 f94a 	bl	80029a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b28      	ldr	r3, [pc, #160]	@ (80007c8 <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	4a27      	ldr	r2, [pc, #156]	@ (80007c8 <SystemClock_Config+0xcc>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000730:	4b25      	ldr	r3, [pc, #148]	@ (80007c8 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a21      	ldr	r2, [pc, #132]	@ (80007cc <SystemClock_Config+0xd0>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000770:	23a8      	movs	r3, #168	@ 0xa8
 8000772:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000778:	2307      	movs	r3, #7
 800077a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fc8b 	bl	800209c <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 f868 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2105      	movs	r1, #5
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 feec 	bl	800258c <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ba:	f000 f851 	bl	8000860 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	@ 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007d6:	4a13      	ldr	r2, [pc, #76]	@ (8000824 <MX_I2C1_Init+0x54>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007dc:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <MX_I2C1_Init+0x58>)
 80007de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <MX_I2C1_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_I2C1_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_I2C1_Init+0x50>)
 800080e:	f000 fc21 	bl	8001054 <HAL_I2C_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000818:	f000 f822 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000028 	.word	0x20000028
 8000824:	40005400 	.word	0x40005400
 8000828:	000186a0 	.word	0x000186a0

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_GPIO_Init+0x30>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a08      	ldr	r2, [pc, #32]	@ (800085c <MX_GPIO_Init+0x30>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_GPIO_Init+0x30>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087a:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <HAL_MspInit+0x4c>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000880:	6453      	str	r3, [r2, #68]	@ 0x44
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	4a08      	ldr	r2, [pc, #32]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	@ 0x40
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008aa:	2007      	movs	r0, #7
 80008ac:	f000 fa02 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a19      	ldr	r2, [pc, #100]	@ (8000940 <HAL_I2C_MspInit+0x84>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d12b      	bne.n	8000936 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a17      	ldr	r2, [pc, #92]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008fa:	23c0      	movs	r3, #192	@ 0xc0
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fe:	2312      	movs	r3, #18
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800090a:	2304      	movs	r3, #4
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	480c      	ldr	r0, [pc, #48]	@ (8000948 <HAL_I2C_MspInit+0x8c>)
 8000916:	f000 fa01 	bl	8000d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 8000924:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	@ 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40005400 	.word	0x40005400
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <NMI_Handler+0x4>

08000954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <MemManage_Handler+0x4>

08000964 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <UsageFault_Handler+0x4>

08000974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a2:	f000 f891 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009d4:	f7ff ffea 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d8:	480c      	ldr	r0, [pc, #48]	@ (8000a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009da:	490d      	ldr	r1, [pc, #52]	@ (8000a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009f0:	4c0a      	ldr	r4, [pc, #40]	@ (8000a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fe:	f001 ffd9 	bl	80029b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a02:	f7ff fd81 	bl	8000508 <main>
  bx  lr    
 8000a06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a14:	08002a3c 	.word	0x08002a3c
  ldr r2, =_sbss
 8000a18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a1c:	2000009c 	.word	0x2000009c

08000a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a28:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <HAL_Init+0x40>)
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a34:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <HAL_Init+0x40>)
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	@ (8000a64 <HAL_Init+0x40>)
 8000a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f931 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 f808 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff ff08 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <HAL_InitTick+0x54>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_InitTick+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f93b 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00e      	b.n	8000ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d80a      	bhi.n	8000ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 f911 	bl	8000cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	@ (8000ac4 <HAL_InitTick+0x5c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000098 	.word	0x20000098

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	@ (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000098 	.word	0x20000098

08000b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b10:	f7ff ffee 	bl	8000af0 <HAL_GetTick>
 8000b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b20:	d005      	beq.n	8000b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b22:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <HAL_Delay+0x44>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b2e:	bf00      	nop
 8000b30:	f7ff ffde 	bl	8000af0 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8f7      	bhi.n	8000b30 <HAL_Delay+0x28>
  {
  }
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	@ (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	@ (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	@ 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	@ 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f7ff ff8e 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff47 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cdc:	f7ff ff5c 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f7ff ff8e 	bl	8000c08 <NVIC_EncodePriority>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5d 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffb0 	bl	8000c70 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	@ 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	e16b      	b.n	8001010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f040 815a 	bne.w	800100a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d005      	beq.n	8000d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d130      	bne.n	8000dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	091b      	lsrs	r3, r3, #4
 8000dba:	f003 0201 	and.w	r2, r3, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d017      	beq.n	8000e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d123      	bne.n	8000e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	69b9      	ldr	r1, [r7, #24]
 8000e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80b4 	beq.w	800100a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b60      	ldr	r3, [pc, #384]	@ (8001028 <HAL_GPIO_Init+0x30c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	4a5f      	ldr	r2, [pc, #380]	@ (8001028 <HAL_GPIO_Init+0x30c>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001028 <HAL_GPIO_Init+0x30c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800102c <HAL_GPIO_Init+0x310>)
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a52      	ldr	r2, [pc, #328]	@ (8001030 <HAL_GPIO_Init+0x314>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d02b      	beq.n	8000f42 <HAL_GPIO_Init+0x226>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a51      	ldr	r2, [pc, #324]	@ (8001034 <HAL_GPIO_Init+0x318>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d025      	beq.n	8000f3e <HAL_GPIO_Init+0x222>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a50      	ldr	r2, [pc, #320]	@ (8001038 <HAL_GPIO_Init+0x31c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01f      	beq.n	8000f3a <HAL_GPIO_Init+0x21e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4f      	ldr	r2, [pc, #316]	@ (800103c <HAL_GPIO_Init+0x320>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d019      	beq.n	8000f36 <HAL_GPIO_Init+0x21a>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4e      	ldr	r2, [pc, #312]	@ (8001040 <HAL_GPIO_Init+0x324>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d013      	beq.n	8000f32 <HAL_GPIO_Init+0x216>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4d      	ldr	r2, [pc, #308]	@ (8001044 <HAL_GPIO_Init+0x328>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d00d      	beq.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4c      	ldr	r2, [pc, #304]	@ (8001048 <HAL_GPIO_Init+0x32c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d007      	beq.n	8000f2a <HAL_GPIO_Init+0x20e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4b      	ldr	r2, [pc, #300]	@ (800104c <HAL_GPIO_Init+0x330>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_GPIO_Init+0x20a>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e00e      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f26:	2308      	movs	r3, #8
 8000f28:	e00c      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	e00a      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f2e:	2305      	movs	r3, #5
 8000f30:	e008      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f32:	2304      	movs	r3, #4
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f36:	2303      	movs	r3, #3
 8000f38:	e004      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e002      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f42:	2300      	movs	r3, #0
 8000f44:	69fa      	ldr	r2, [r7, #28]
 8000f46:	f002 0203 	and.w	r2, r2, #3
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	4093      	lsls	r3, r2
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f54:	4935      	ldr	r1, [pc, #212]	@ (800102c <HAL_GPIO_Init+0x310>)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f62:	4b3b      	ldr	r3, [pc, #236]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f86:	4a32      	ldr	r2, [pc, #200]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8c:	4b30      	ldr	r3, [pc, #192]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb0:	4a27      	ldr	r2, [pc, #156]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fda:	4a1d      	ldr	r2, [pc, #116]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001004:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <HAL_GPIO_Init+0x334>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3301      	adds	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	f67f ae90 	bls.w	8000d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3724      	adds	r7, #36	@ 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40013800 	.word	0x40013800
 8001030:	40020000 	.word	0x40020000
 8001034:	40020400 	.word	0x40020400
 8001038:	40020800 	.word	0x40020800
 800103c:	40020c00 	.word	0x40020c00
 8001040:	40021000 	.word	0x40021000
 8001044:	40021400 	.word	0x40021400
 8001048:	40021800 	.word	0x40021800
 800104c:	40021c00 	.word	0x40021c00
 8001050:	40013c00 	.word	0x40013c00

08001054 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e12b      	b.n	80012be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d106      	bne.n	8001080 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fc1e 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2224      	movs	r2, #36	@ 0x24
 8001084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010b8:	f001 fc60 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 80010bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4a81      	ldr	r2, [pc, #516]	@ (80012c8 <HAL_I2C_Init+0x274>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d807      	bhi.n	80010d8 <HAL_I2C_Init+0x84>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4a80      	ldr	r2, [pc, #512]	@ (80012cc <HAL_I2C_Init+0x278>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	bf94      	ite	ls
 80010d0:	2301      	movls	r3, #1
 80010d2:	2300      	movhi	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	e006      	b.n	80010e6 <HAL_I2C_Init+0x92>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4a7d      	ldr	r2, [pc, #500]	@ (80012d0 <HAL_I2C_Init+0x27c>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	bf94      	ite	ls
 80010e0:	2301      	movls	r3, #1
 80010e2:	2300      	movhi	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e0e7      	b.n	80012be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4a78      	ldr	r2, [pc, #480]	@ (80012d4 <HAL_I2C_Init+0x280>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	0c9b      	lsrs	r3, r3, #18
 80010f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	430a      	orrs	r2, r1
 800110c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4a6a      	ldr	r2, [pc, #424]	@ (80012c8 <HAL_I2C_Init+0x274>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d802      	bhi.n	8001128 <HAL_I2C_Init+0xd4>
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3301      	adds	r3, #1
 8001126:	e009      	b.n	800113c <HAL_I2C_Init+0xe8>
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800112e:	fb02 f303 	mul.w	r3, r2, r3
 8001132:	4a69      	ldr	r2, [pc, #420]	@ (80012d8 <HAL_I2C_Init+0x284>)
 8001134:	fba2 2303 	umull	r2, r3, r2, r3
 8001138:	099b      	lsrs	r3, r3, #6
 800113a:	3301      	adds	r3, #1
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6812      	ldr	r2, [r2, #0]
 8001140:	430b      	orrs	r3, r1
 8001142:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800114e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	495c      	ldr	r1, [pc, #368]	@ (80012c8 <HAL_I2C_Init+0x274>)
 8001158:	428b      	cmp	r3, r1
 800115a:	d819      	bhi.n	8001190 <HAL_I2C_Init+0x13c>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	1e59      	subs	r1, r3, #1
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fbb1 f3f3 	udiv	r3, r1, r3
 800116a:	1c59      	adds	r1, r3, #1
 800116c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001170:	400b      	ands	r3, r1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00a      	beq.n	800118c <HAL_I2C_Init+0x138>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	1e59      	subs	r1, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fbb1 f3f3 	udiv	r3, r1, r3
 8001184:	3301      	adds	r3, #1
 8001186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800118a:	e051      	b.n	8001230 <HAL_I2C_Init+0x1dc>
 800118c:	2304      	movs	r3, #4
 800118e:	e04f      	b.n	8001230 <HAL_I2C_Init+0x1dc>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d111      	bne.n	80011bc <HAL_I2C_Init+0x168>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	1e58      	subs	r0, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6859      	ldr	r1, [r3, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	440b      	add	r3, r1
 80011a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011aa:	3301      	adds	r3, #1
 80011ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bf0c      	ite	eq
 80011b4:	2301      	moveq	r3, #1
 80011b6:	2300      	movne	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	e012      	b.n	80011e2 <HAL_I2C_Init+0x18e>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1e58      	subs	r0, r3, #1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6859      	ldr	r1, [r3, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	0099      	lsls	r1, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80011d2:	3301      	adds	r3, #1
 80011d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bf0c      	ite	eq
 80011dc:	2301      	moveq	r3, #1
 80011de:	2300      	movne	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_I2C_Init+0x196>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e022      	b.n	8001230 <HAL_I2C_Init+0x1dc>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10e      	bne.n	8001210 <HAL_I2C_Init+0x1bc>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1e58      	subs	r0, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6859      	ldr	r1, [r3, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	440b      	add	r3, r1
 8001200:	fbb0 f3f3 	udiv	r3, r0, r3
 8001204:	3301      	adds	r3, #1
 8001206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800120a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800120e:	e00f      	b.n	8001230 <HAL_I2C_Init+0x1dc>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	1e58      	subs	r0, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6859      	ldr	r1, [r3, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	0099      	lsls	r1, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	fbb0 f3f3 	udiv	r3, r0, r3
 8001226:	3301      	adds	r3, #1
 8001228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800122c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	6809      	ldr	r1, [r1, #0]
 8001234:	4313      	orrs	r3, r2
 8001236:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69da      	ldr	r2, [r3, #28]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800125e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6911      	ldr	r1, [r2, #16]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	68d2      	ldr	r2, [r2, #12]
 800126a:	4311      	orrs	r1, r2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	430b      	orrs	r3, r1
 8001272:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695a      	ldr	r2, [r3, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0201 	orr.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2220      	movs	r2, #32
 80012aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	000186a0 	.word	0x000186a0
 80012cc:	001e847f 	.word	0x001e847f
 80012d0:	003d08ff 	.word	0x003d08ff
 80012d4:	431bde83 	.word	0x431bde83
 80012d8:	10624dd3 	.word	0x10624dd3

080012dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	4608      	mov	r0, r1
 80012e6:	4611      	mov	r1, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	817b      	strh	r3, [r7, #10]
 80012ee:	460b      	mov	r3, r1
 80012f0:	813b      	strh	r3, [r7, #8]
 80012f2:	4613      	mov	r3, r2
 80012f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012f6:	f7ff fbfb 	bl	8000af0 <HAL_GetTick>
 80012fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b20      	cmp	r3, #32
 8001306:	f040 80d9 	bne.w	80014bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2319      	movs	r3, #25
 8001310:	2201      	movs	r2, #1
 8001312:	496d      	ldr	r1, [pc, #436]	@ (80014c8 <HAL_I2C_Mem_Write+0x1ec>)
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 fc8b 	bl	8001c30 <I2C_WaitOnFlagUntilTimeout>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001320:	2302      	movs	r3, #2
 8001322:	e0cc      	b.n	80014be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <HAL_I2C_Mem_Write+0x56>
 800132e:	2302      	movs	r3, #2
 8001330:	e0c5      	b.n	80014be <HAL_I2C_Mem_Write+0x1e2>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b01      	cmp	r3, #1
 8001346:	d007      	beq.n	8001358 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0201 	orr.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001366:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2221      	movs	r2, #33	@ 0x21
 800136c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2240      	movs	r2, #64	@ 0x40
 8001374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6a3a      	ldr	r2, [r7, #32]
 8001382:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001388:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800138e:	b29a      	uxth	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4a4d      	ldr	r2, [pc, #308]	@ (80014cc <HAL_I2C_Mem_Write+0x1f0>)
 8001398:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800139a:	88f8      	ldrh	r0, [r7, #6]
 800139c:	893a      	ldrh	r2, [r7, #8]
 800139e:	8979      	ldrh	r1, [r7, #10]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	4603      	mov	r3, r0
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 fac2 	bl	8001934 <I2C_RequestMemoryWrite>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d052      	beq.n	800145c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e081      	b.n	80014be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 fd50 	bl	8001e64 <I2C_WaitOnTXEFlagUntilTimeout>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00d      	beq.n	80013e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d107      	bne.n	80013e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e06b      	b.n	80014be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ea:	781a      	ldrb	r2, [r3, #0]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001400:	3b01      	subs	r3, #1
 8001402:	b29a      	uxth	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800140c:	b29b      	uxth	r3, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	b29a      	uxth	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b04      	cmp	r3, #4
 8001422:	d11b      	bne.n	800145c <HAL_I2C_Mem_Write+0x180>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001428:	2b00      	cmp	r3, #0
 800142a:	d017      	beq.n	800145c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001430:	781a      	ldrb	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001446:	3b01      	subs	r3, #1
 8001448:	b29a      	uxth	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001452:	b29b      	uxth	r3, r3
 8001454:	3b01      	subs	r3, #1
 8001456:	b29a      	uxth	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1aa      	bne.n	80013ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 fd43 	bl	8001ef4 <I2C_WaitOnBTFFlagUntilTimeout>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00d      	beq.n	8001490 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	2b04      	cmp	r3, #4
 800147a:	d107      	bne.n	800148c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800148a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e016      	b.n	80014be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800149e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2220      	movs	r2, #32
 80014a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e000      	b.n	80014be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80014bc:	2302      	movs	r3, #2
  }
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	00100002 	.word	0x00100002
 80014cc:	ffff0000 	.word	0xffff0000

080014d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08c      	sub	sp, #48	@ 0x30
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4603      	mov	r3, r0
 80014e0:	817b      	strh	r3, [r7, #10]
 80014e2:	460b      	mov	r3, r1
 80014e4:	813b      	strh	r3, [r7, #8]
 80014e6:	4613      	mov	r3, r2
 80014e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014ea:	f7ff fb01 	bl	8000af0 <HAL_GetTick>
 80014ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b20      	cmp	r3, #32
 80014fa:	f040 8214 	bne.w	8001926 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2319      	movs	r3, #25
 8001504:	2201      	movs	r2, #1
 8001506:	497b      	ldr	r1, [pc, #492]	@ (80016f4 <HAL_I2C_Mem_Read+0x224>)
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fb91 	bl	8001c30 <I2C_WaitOnFlagUntilTimeout>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001514:	2302      	movs	r3, #2
 8001516:	e207      	b.n	8001928 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800151e:	2b01      	cmp	r3, #1
 8001520:	d101      	bne.n	8001526 <HAL_I2C_Mem_Read+0x56>
 8001522:	2302      	movs	r3, #2
 8001524:	e200      	b.n	8001928 <HAL_I2C_Mem_Read+0x458>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b01      	cmp	r3, #1
 800153a:	d007      	beq.n	800154c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800155a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2222      	movs	r2, #34	@ 0x22
 8001560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2240      	movs	r2, #64	@ 0x40
 8001568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2200      	movs	r2, #0
 8001570:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800157c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001582:	b29a      	uxth	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4a5b      	ldr	r2, [pc, #364]	@ (80016f8 <HAL_I2C_Mem_Read+0x228>)
 800158c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800158e:	88f8      	ldrh	r0, [r7, #6]
 8001590:	893a      	ldrh	r2, [r7, #8]
 8001592:	8979      	ldrh	r1, [r7, #10]
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	4603      	mov	r3, r0
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 fa5e 	bl	8001a60 <I2C_RequestMemoryRead>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e1bc      	b.n	8001928 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d113      	bne.n	80015de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	623b      	str	r3, [r7, #32]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	623b      	str	r3, [r7, #32]
 80015ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	e190      	b.n	8001900 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d11b      	bne.n	800161e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	e170      	b.n	8001900 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001622:	2b02      	cmp	r3, #2
 8001624:	d11b      	bne.n	800165e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001634:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001644:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	61bb      	str	r3, [r7, #24]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	e150      	b.n	8001900 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001674:	e144      	b.n	8001900 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800167a:	2b03      	cmp	r3, #3
 800167c:	f200 80f1 	bhi.w	8001862 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001684:	2b01      	cmp	r3, #1
 8001686:	d123      	bne.n	80016d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800168a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 fc79 	bl	8001f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e145      	b.n	8001928 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	3b01      	subs	r3, #1
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80016ce:	e117      	b.n	8001900 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d14e      	bne.n	8001776 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016de:	2200      	movs	r2, #0
 80016e0:	4906      	ldr	r1, [pc, #24]	@ (80016fc <HAL_I2C_Mem_Read+0x22c>)
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 faa4 	bl	8001c30 <I2C_WaitOnFlagUntilTimeout>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d008      	beq.n	8001700 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e11a      	b.n	8001928 <HAL_I2C_Mem_Read+0x458>
 80016f2:	bf00      	nop
 80016f4:	00100002 	.word	0x00100002
 80016f8:	ffff0000 	.word	0xffff0000
 80016fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800170e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800172c:	3b01      	subs	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001738:	b29b      	uxth	r3, r3
 800173a:	3b01      	subs	r3, #1
 800173c:	b29a      	uxth	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800175e:	3b01      	subs	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800176a:	b29b      	uxth	r3, r3
 800176c:	3b01      	subs	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001774:	e0c4      	b.n	8001900 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800177c:	2200      	movs	r2, #0
 800177e:	496c      	ldr	r1, [pc, #432]	@ (8001930 <HAL_I2C_Mem_Read+0x460>)
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fa55 	bl	8001c30 <I2C_WaitOnFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0cb      	b.n	8001928 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800179e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017d8:	2200      	movs	r2, #0
 80017da:	4955      	ldr	r1, [pc, #340]	@ (8001930 <HAL_I2C_Mem_Read+0x460>)
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 fa27 	bl	8001c30 <I2C_WaitOnFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e09d      	b.n	8001928 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001818:	3b01      	subs	r3, #1
 800181a:	b29a      	uxth	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001824:	b29b      	uxth	r3, r3
 8001826:	3b01      	subs	r3, #1
 8001828:	b29a      	uxth	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	3b01      	subs	r3, #1
 800185a:	b29a      	uxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001860:	e04e      	b.n	8001900 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001864:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fb8c 	bl	8001f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e058      	b.n	8001928 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d124      	bne.n	8001900 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d107      	bne.n	80018ce <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018cc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001904:	2b00      	cmp	r3, #0
 8001906:	f47f aeb6 	bne.w	8001676 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2220      	movs	r2, #32
 800190e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001926:	2302      	movs	r3, #2
  }
}
 8001928:	4618      	mov	r0, r3
 800192a:	3728      	adds	r7, #40	@ 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	00010004 	.word	0x00010004

08001934 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af02      	add	r7, sp, #8
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	461a      	mov	r2, r3
 8001942:	4603      	mov	r3, r0
 8001944:	817b      	strh	r3, [r7, #10]
 8001946:	460b      	mov	r3, r1
 8001948:	813b      	strh	r3, [r7, #8]
 800194a:	4613      	mov	r3, r2
 800194c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800195c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	2200      	movs	r2, #0
 8001966:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 f960 	bl	8001c30 <I2C_WaitOnFlagUntilTimeout>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001984:	d103      	bne.n	800198e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800198c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e05f      	b.n	8001a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001992:	897b      	ldrh	r3, [r7, #10]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80019a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	6a3a      	ldr	r2, [r7, #32]
 80019a6:	492d      	ldr	r1, [pc, #180]	@ (8001a5c <I2C_RequestMemoryWrite+0x128>)
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 f9bb 	bl	8001d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e04c      	b.n	8001a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019d0:	6a39      	ldr	r1, [r7, #32]
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 fa46 	bl	8001e64 <I2C_WaitOnTXEFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00d      	beq.n	80019fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d107      	bne.n	80019f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e02b      	b.n	8001a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a00:	893b      	ldrh	r3, [r7, #8]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	e021      	b.n	8001a50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a0c:	893b      	ldrh	r3, [r7, #8]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a1c:	6a39      	ldr	r1, [r7, #32]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 fa20 	bl	8001e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00d      	beq.n	8001a46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d107      	bne.n	8001a42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e005      	b.n	8001a52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a46:	893b      	ldrh	r3, [r7, #8]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	00010002 	.word	0x00010002

08001a60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	4608      	mov	r0, r1
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4603      	mov	r3, r0
 8001a70:	817b      	strh	r3, [r7, #10]
 8001a72:	460b      	mov	r3, r1
 8001a74:	813b      	strh	r3, [r7, #8]
 8001a76:	4613      	mov	r3, r2
 8001a78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f8c2 	bl	8001c30 <I2C_WaitOnFlagUntilTimeout>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00d      	beq.n	8001ace <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ac0:	d103      	bne.n	8001aca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0aa      	b.n	8001c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ace:	897b      	ldrh	r3, [r7, #10]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001adc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae0:	6a3a      	ldr	r2, [r7, #32]
 8001ae2:	4952      	ldr	r1, [pc, #328]	@ (8001c2c <I2C_RequestMemoryRead+0x1cc>)
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f91d 	bl	8001d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e097      	b.n	8001c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b0c:	6a39      	ldr	r1, [r7, #32]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 f9a8 	bl	8001e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00d      	beq.n	8001b36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d107      	bne.n	8001b32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e076      	b.n	8001c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b3c:	893b      	ldrh	r3, [r7, #8]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	e021      	b.n	8001b8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b48:	893b      	ldrh	r3, [r7, #8]
 8001b4a:	0a1b      	lsrs	r3, r3, #8
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b58:	6a39      	ldr	r1, [r7, #32]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f982 	bl	8001e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00d      	beq.n	8001b82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d107      	bne.n	8001b7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e050      	b.n	8001c24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b82:	893b      	ldrh	r3, [r7, #8]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b8e:	6a39      	ldr	r1, [r7, #32]
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 f967 	bl	8001e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00d      	beq.n	8001bb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d107      	bne.n	8001bb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e035      	b.n	8001c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f82b 	bl	8001c30 <I2C_WaitOnFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00d      	beq.n	8001bfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bee:	d103      	bne.n	8001bf8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bf6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e013      	b.n	8001c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001bfc:	897b      	ldrh	r3, [r7, #10]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0e:	6a3a      	ldr	r2, [r7, #32]
 8001c10:	4906      	ldr	r1, [pc, #24]	@ (8001c2c <I2C_RequestMemoryRead+0x1cc>)
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f886 	bl	8001d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	00010002 	.word	0x00010002

08001c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c40:	e048      	b.n	8001cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d044      	beq.n	8001cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4a:	f7fe ff51 	bl	8000af0 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d302      	bcc.n	8001c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d139      	bne.n	8001cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d10d      	bne.n	8001c86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	43da      	mvns	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	4013      	ands	r3, r2
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	e00c      	b.n	8001ca0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	43da      	mvns	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	4013      	ands	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d116      	bne.n	8001cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e023      	b.n	8001d1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	0c1b      	lsrs	r3, r3, #16
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d10d      	bne.n	8001cfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf0c      	ite	eq
 8001cf0:	2301      	moveq	r3, #1
 8001cf2:	2300      	movne	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	e00c      	b.n	8001d14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	43da      	mvns	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	4013      	ands	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf0c      	ite	eq
 8001d0c:	2301      	moveq	r3, #1
 8001d0e:	2300      	movne	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d093      	beq.n	8001c42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d32:	e071      	b.n	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d42:	d123      	bne.n	8001d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	f043 0204 	orr.w	r2, r3, #4
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e067      	b.n	8001e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d92:	d041      	beq.n	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d94:	f7fe feac 	bl	8000af0 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d302      	bcc.n	8001daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d136      	bne.n	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	0c1b      	lsrs	r3, r3, #16
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d10c      	bne.n	8001dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	bf14      	ite	ne
 8001dc6:	2301      	movne	r3, #1
 8001dc8:	2300      	moveq	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	e00b      	b.n	8001de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf14      	ite	ne
 8001de0:	2301      	movne	r3, #1
 8001de2:	2300      	moveq	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d016      	beq.n	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	f043 0220 	orr.w	r2, r3, #32
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e021      	b.n	8001e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	0c1b      	lsrs	r3, r3, #16
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d10c      	bne.n	8001e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	43da      	mvns	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e00b      	b.n	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4013      	ands	r3, r2
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f47f af6d 	bne.w	8001d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e70:	e034      	b.n	8001edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f8e3 	bl	800203e <I2C_IsAcknowledgeFailed>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e034      	b.n	8001eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d028      	beq.n	8001edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8a:	f7fe fe31 	bl	8000af0 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d302      	bcc.n	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d11d      	bne.n	8001edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eaa:	2b80      	cmp	r3, #128	@ 0x80
 8001eac:	d016      	beq.n	8001edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	f043 0220 	orr.w	r2, r3, #32
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e007      	b.n	8001eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee6:	2b80      	cmp	r3, #128	@ 0x80
 8001ee8:	d1c3      	bne.n	8001e72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f00:	e034      	b.n	8001f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 f89b 	bl	800203e <I2C_IsAcknowledgeFailed>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e034      	b.n	8001f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d028      	beq.n	8001f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f1a:	f7fe fde9 	bl	8000af0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d302      	bcc.n	8001f30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d11d      	bne.n	8001f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d016      	beq.n	8001f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	f043 0220 	orr.w	r2, r3, #32
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e007      	b.n	8001f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d1c3      	bne.n	8001f02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f90:	e049      	b.n	8002026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d119      	bne.n	8001fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0210 	mvn.w	r2, #16
 8001fa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e030      	b.n	8002036 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd4:	f7fe fd8c 	bl	8000af0 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d302      	bcc.n	8001fea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d11d      	bne.n	8002026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff4:	2b40      	cmp	r3, #64	@ 0x40
 8001ff6:	d016      	beq.n	8002026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f043 0220 	orr.w	r2, r3, #32
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e007      	b.n	8002036 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002030:	2b40      	cmp	r3, #64	@ 0x40
 8002032:	d1ae      	bne.n	8001f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002054:	d11b      	bne.n	800208e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800205e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f043 0204 	orr.w	r2, r3, #4
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e267      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d075      	beq.n	80021a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020ba:	4b88      	ldr	r3, [pc, #544]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d00c      	beq.n	80020e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c6:	4b85      	ldr	r3, [pc, #532]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d112      	bne.n	80020f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d2:	4b82      	ldr	r3, [pc, #520]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020de:	d10b      	bne.n	80020f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	4b7e      	ldr	r3, [pc, #504]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d05b      	beq.n	80021a4 <HAL_RCC_OscConfig+0x108>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d157      	bne.n	80021a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e242      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002100:	d106      	bne.n	8002110 <HAL_RCC_OscConfig+0x74>
 8002102:	4b76      	ldr	r3, [pc, #472]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a75      	ldr	r2, [pc, #468]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e01d      	b.n	800214c <HAL_RCC_OscConfig+0xb0>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x98>
 800211a:	4b70      	ldr	r3, [pc, #448]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a6f      	ldr	r2, [pc, #444]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b6d      	ldr	r3, [pc, #436]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a6c      	ldr	r2, [pc, #432]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0xb0>
 8002134:	4b69      	ldr	r3, [pc, #420]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a68      	ldr	r2, [pc, #416]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 800213a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b66      	ldr	r3, [pc, #408]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a65      	ldr	r2, [pc, #404]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800214a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7fe fccc 	bl	8000af0 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7fe fcc8 	bl	8000af0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	@ 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e207      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	4b5b      	ldr	r3, [pc, #364]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0xc0>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7fe fcb8 	bl	8000af0 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7fe fcb4 	bl	8000af0 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	@ 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e1f3      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	4b51      	ldr	r3, [pc, #324]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0xe8>
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d063      	beq.n	800227a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021b2:	4b4a      	ldr	r3, [pc, #296]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021be:	4b47      	ldr	r3, [pc, #284]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d11c      	bne.n	8002204 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ca:	4b44      	ldr	r3, [pc, #272]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d116      	bne.n	8002204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	4b41      	ldr	r3, [pc, #260]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_RCC_OscConfig+0x152>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e1c7      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ee:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4937      	ldr	r1, [pc, #220]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	e03a      	b.n	800227a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d020      	beq.n	800224e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800220c:	4b34      	ldr	r3, [pc, #208]	@ (80022e0 <HAL_RCC_OscConfig+0x244>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7fe fc6d 	bl	8000af0 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221a:	f7fe fc69 	bl	8000af0 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1a8      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222c:	4b2b      	ldr	r3, [pc, #172]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b28      	ldr	r3, [pc, #160]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4925      	ldr	r1, [pc, #148]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 8002248:	4313      	orrs	r3, r2
 800224a:	600b      	str	r3, [r1, #0]
 800224c:	e015      	b.n	800227a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224e:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <HAL_RCC_OscConfig+0x244>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe fc4c 	bl	8000af0 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225c:	f7fe fc48 	bl	8000af0 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e187      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226e:	4b1b      	ldr	r3, [pc, #108]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d036      	beq.n	80022f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d016      	beq.n	80022bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228e:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <HAL_RCC_OscConfig+0x248>)
 8002290:	2201      	movs	r2, #1
 8002292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7fe fc2c 	bl	8000af0 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229c:	f7fe fc28 	bl	8000af0 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e167      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ae:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <HAL_RCC_OscConfig+0x240>)
 80022b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x200>
 80022ba:	e01b      	b.n	80022f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022bc:	4b09      	ldr	r3, [pc, #36]	@ (80022e4 <HAL_RCC_OscConfig+0x248>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7fe fc15 	bl	8000af0 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c8:	e00e      	b.n	80022e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ca:	f7fe fc11 	bl	8000af0 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d907      	bls.n	80022e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e150      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
 80022dc:	40023800 	.word	0x40023800
 80022e0:	42470000 	.word	0x42470000
 80022e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	4b88      	ldr	r3, [pc, #544]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 80022ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1ea      	bne.n	80022ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8097 	beq.w	8002430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002306:	4b81      	ldr	r3, [pc, #516]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10f      	bne.n	8002332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b7d      	ldr	r3, [pc, #500]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	4a7c      	ldr	r2, [pc, #496]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002320:	6413      	str	r3, [r2, #64]	@ 0x40
 8002322:	4b7a      	ldr	r3, [pc, #488]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232e:	2301      	movs	r3, #1
 8002330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002332:	4b77      	ldr	r3, [pc, #476]	@ (8002510 <HAL_RCC_OscConfig+0x474>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d118      	bne.n	8002370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233e:	4b74      	ldr	r3, [pc, #464]	@ (8002510 <HAL_RCC_OscConfig+0x474>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a73      	ldr	r2, [pc, #460]	@ (8002510 <HAL_RCC_OscConfig+0x474>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234a:	f7fe fbd1 	bl	8000af0 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002352:	f7fe fbcd 	bl	8000af0 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e10c      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002364:	4b6a      	ldr	r3, [pc, #424]	@ (8002510 <HAL_RCC_OscConfig+0x474>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x2ea>
 8002378:	4b64      	ldr	r3, [pc, #400]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800237c:	4a63      	ldr	r2, [pc, #396]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6713      	str	r3, [r2, #112]	@ 0x70
 8002384:	e01c      	b.n	80023c0 <HAL_RCC_OscConfig+0x324>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b05      	cmp	r3, #5
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x30c>
 800238e:	4b5f      	ldr	r3, [pc, #380]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002392:	4a5e      	ldr	r2, [pc, #376]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 8002394:	f043 0304 	orr.w	r3, r3, #4
 8002398:	6713      	str	r3, [r2, #112]	@ 0x70
 800239a:	4b5c      	ldr	r3, [pc, #368]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239e:	4a5b      	ldr	r2, [pc, #364]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0x324>
 80023a8:	4b58      	ldr	r3, [pc, #352]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ac:	4a57      	ldr	r2, [pc, #348]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 80023ae:	f023 0301 	bic.w	r3, r3, #1
 80023b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023b4:	4b55      	ldr	r3, [pc, #340]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b8:	4a54      	ldr	r2, [pc, #336]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 80023ba:	f023 0304 	bic.w	r3, r3, #4
 80023be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d015      	beq.n	80023f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c8:	f7fe fb92 	bl	8000af0 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d0:	f7fe fb8e 	bl	8000af0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0cb      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e6:	4b49      	ldr	r3, [pc, #292]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0ee      	beq.n	80023d0 <HAL_RCC_OscConfig+0x334>
 80023f2:	e014      	b.n	800241e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7fe fb7c 	bl	8000af0 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fc:	f7fe fb78 	bl	8000af0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e0b5      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002412:	4b3e      	ldr	r3, [pc, #248]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1ee      	bne.n	80023fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800241e:	7dfb      	ldrb	r3, [r7, #23]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d105      	bne.n	8002430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002424:	4b39      	ldr	r3, [pc, #228]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	4a38      	ldr	r2, [pc, #224]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 800242a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800242e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80a1 	beq.w	800257c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800243a:	4b34      	ldr	r3, [pc, #208]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b08      	cmp	r3, #8
 8002444:	d05c      	beq.n	8002500 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d141      	bne.n	80024d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	4b31      	ldr	r3, [pc, #196]	@ (8002514 <HAL_RCC_OscConfig+0x478>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe fb4c 	bl	8000af0 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245c:	f7fe fb48 	bl	8000af0 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e087      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	4b27      	ldr	r3, [pc, #156]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	019b      	lsls	r3, r3, #6
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	3b01      	subs	r3, #1
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	491b      	ldr	r1, [pc, #108]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <HAL_RCC_OscConfig+0x478>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe fb21 	bl	8000af0 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b2:	f7fe fb1d 	bl	8000af0 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e05c      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c4:	4b11      	ldr	r3, [pc, #68]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x416>
 80024d0:	e054      	b.n	800257c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <HAL_RCC_OscConfig+0x478>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe fb0a 	bl	8000af0 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe fb06 	bl	8000af0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e045      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_RCC_OscConfig+0x470>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x444>
 80024fe:	e03d      	b.n	800257c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d107      	bne.n	8002518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e038      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
 800250c:	40023800 	.word	0x40023800
 8002510:	40007000 	.word	0x40007000
 8002514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002518:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <HAL_RCC_OscConfig+0x4ec>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d028      	beq.n	8002578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d121      	bne.n	8002578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d11a      	bne.n	8002578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002548:	4013      	ands	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800254e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002550:	4293      	cmp	r3, r2
 8002552:	d111      	bne.n	8002578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	085b      	lsrs	r3, r3, #1
 8002560:	3b01      	subs	r3, #1
 8002562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d107      	bne.n	8002578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800

0800258c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0cc      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b68      	ldr	r3, [pc, #416]	@ (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d90c      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b65      	ldr	r3, [pc, #404]	@ (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b63      	ldr	r3, [pc, #396]	@ (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0b8      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e0:	4b59      	ldr	r3, [pc, #356]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a58      	ldr	r2, [pc, #352]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f8:	4b53      	ldr	r3, [pc, #332]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a52      	ldr	r2, [pc, #328]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b50      	ldr	r3, [pc, #320]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	494d      	ldr	r1, [pc, #308]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d044      	beq.n	80026ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b47      	ldr	r3, [pc, #284]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d119      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e07f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d003      	beq.n	800264a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002646:	2b03      	cmp	r3, #3
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b3f      	ldr	r3, [pc, #252]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b3b      	ldr	r3, [pc, #236]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e067      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b37      	ldr	r3, [pc, #220]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4934      	ldr	r1, [pc, #208]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800267c:	f7fe fa38 	bl	8000af0 <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7fe fa34 	bl	8000af0 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e04f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b2b      	ldr	r3, [pc, #172]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ac:	4b25      	ldr	r3, [pc, #148]	@ (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d20c      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b22      	ldr	r3, [pc, #136]	@ (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b20      	ldr	r3, [pc, #128]	@ (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e032      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	4b19      	ldr	r3, [pc, #100]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4916      	ldr	r1, [pc, #88]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fe:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	490e      	ldr	r1, [pc, #56]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002712:	f000 f821 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002716:	4602      	mov	r2, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	490a      	ldr	r1, [pc, #40]	@ (800274c <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	5ccb      	ldrb	r3, [r1, r3]
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	4a09      	ldr	r2, [pc, #36]	@ (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800272e:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe f998 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023c00 	.word	0x40023c00
 8002748:	40023800 	.word	0x40023800
 800274c:	08002a14 	.word	0x08002a14
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800275c:	b094      	sub	sp, #80	@ 0x50
 800275e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002770:	4b79      	ldr	r3, [pc, #484]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 030c 	and.w	r3, r3, #12
 8002778:	2b08      	cmp	r3, #8
 800277a:	d00d      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x40>
 800277c:	2b08      	cmp	r3, #8
 800277e:	f200 80e1 	bhi.w	8002944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x34>
 8002786:	2b04      	cmp	r3, #4
 8002788:	d003      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x3a>
 800278a:	e0db      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800278c:	4b73      	ldr	r3, [pc, #460]	@ (800295c <HAL_RCC_GetSysClockFreq+0x204>)
 800278e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002790:	e0db      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002792:	4b73      	ldr	r3, [pc, #460]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x208>)
 8002794:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002796:	e0d8      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002798:	4b6f      	ldr	r3, [pc, #444]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d063      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	099b      	lsrs	r3, r3, #6
 80027b4:	2200      	movs	r2, #0
 80027b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80027c2:	2300      	movs	r3, #0
 80027c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80027c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027ca:	4622      	mov	r2, r4
 80027cc:	462b      	mov	r3, r5
 80027ce:	f04f 0000 	mov.w	r0, #0
 80027d2:	f04f 0100 	mov.w	r1, #0
 80027d6:	0159      	lsls	r1, r3, #5
 80027d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027dc:	0150      	lsls	r0, r2, #5
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4621      	mov	r1, r4
 80027e4:	1a51      	subs	r1, r2, r1
 80027e6:	6139      	str	r1, [r7, #16]
 80027e8:	4629      	mov	r1, r5
 80027ea:	eb63 0301 	sbc.w	r3, r3, r1
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027fc:	4659      	mov	r1, fp
 80027fe:	018b      	lsls	r3, r1, #6
 8002800:	4651      	mov	r1, sl
 8002802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002806:	4651      	mov	r1, sl
 8002808:	018a      	lsls	r2, r1, #6
 800280a:	4651      	mov	r1, sl
 800280c:	ebb2 0801 	subs.w	r8, r2, r1
 8002810:	4659      	mov	r1, fp
 8002812:	eb63 0901 	sbc.w	r9, r3, r1
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800282a:	4690      	mov	r8, r2
 800282c:	4699      	mov	r9, r3
 800282e:	4623      	mov	r3, r4
 8002830:	eb18 0303 	adds.w	r3, r8, r3
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	462b      	mov	r3, r5
 8002838:	eb49 0303 	adc.w	r3, r9, r3
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800284a:	4629      	mov	r1, r5
 800284c:	024b      	lsls	r3, r1, #9
 800284e:	4621      	mov	r1, r4
 8002850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002854:	4621      	mov	r1, r4
 8002856:	024a      	lsls	r2, r1, #9
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800285e:	2200      	movs	r2, #0
 8002860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002868:	f7fd fcae 	bl	80001c8 <__aeabi_uldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4613      	mov	r3, r2
 8002872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002874:	e058      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002876:	4b38      	ldr	r3, [pc, #224]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	099b      	lsrs	r3, r3, #6
 800287c:	2200      	movs	r2, #0
 800287e:	4618      	mov	r0, r3
 8002880:	4611      	mov	r1, r2
 8002882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002886:	623b      	str	r3, [r7, #32]
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
 800288c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002890:	4642      	mov	r2, r8
 8002892:	464b      	mov	r3, r9
 8002894:	f04f 0000 	mov.w	r0, #0
 8002898:	f04f 0100 	mov.w	r1, #0
 800289c:	0159      	lsls	r1, r3, #5
 800289e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a2:	0150      	lsls	r0, r2, #5
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4641      	mov	r1, r8
 80028aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80028ae:	4649      	mov	r1, r9
 80028b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028c8:	ebb2 040a 	subs.w	r4, r2, sl
 80028cc:	eb63 050b 	sbc.w	r5, r3, fp
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	00eb      	lsls	r3, r5, #3
 80028da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028de:	00e2      	lsls	r2, r4, #3
 80028e0:	4614      	mov	r4, r2
 80028e2:	461d      	mov	r5, r3
 80028e4:	4643      	mov	r3, r8
 80028e6:	18e3      	adds	r3, r4, r3
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	464b      	mov	r3, r9
 80028ec:	eb45 0303 	adc.w	r3, r5, r3
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028fe:	4629      	mov	r1, r5
 8002900:	028b      	lsls	r3, r1, #10
 8002902:	4621      	mov	r1, r4
 8002904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002908:	4621      	mov	r1, r4
 800290a:	028a      	lsls	r2, r1, #10
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002912:	2200      	movs	r2, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	61fa      	str	r2, [r7, #28]
 8002918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800291c:	f7fd fc54 	bl	80001c8 <__aeabi_uldivmod>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4613      	mov	r3, r2
 8002926:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	0c1b      	lsrs	r3, r3, #16
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	3301      	adds	r3, #1
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002938:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800293a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002942:	e002      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002944:	4b05      	ldr	r3, [pc, #20]	@ (800295c <HAL_RCC_GetSysClockFreq+0x204>)
 8002946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800294c:	4618      	mov	r0, r3
 800294e:	3750      	adds	r7, #80	@ 0x50
 8002950:	46bd      	mov	sp, r7
 8002952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800
 800295c:	00f42400 	.word	0x00f42400
 8002960:	007a1200 	.word	0x007a1200

08002964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b03      	ldr	r3, [pc, #12]	@ (8002978 <HAL_RCC_GetHCLKFreq+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000000 	.word	0x20000000

0800297c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002980:	f7ff fff0 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002984:	4602      	mov	r2, r0
 8002986:	4b05      	ldr	r3, [pc, #20]	@ (800299c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	0a9b      	lsrs	r3, r3, #10
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	4903      	ldr	r1, [pc, #12]	@ (80029a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002992:	5ccb      	ldrb	r3, [r1, r3]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40023800 	.word	0x40023800
 80029a0:	08002a24 	.word	0x08002a24

080029a4 <memset>:
 80029a4:	4402      	add	r2, r0
 80029a6:	4603      	mov	r3, r0
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d100      	bne.n	80029ae <memset+0xa>
 80029ac:	4770      	bx	lr
 80029ae:	f803 1b01 	strb.w	r1, [r3], #1
 80029b2:	e7f9      	b.n	80029a8 <memset+0x4>

080029b4 <__libc_init_array>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	4d0d      	ldr	r5, [pc, #52]	@ (80029ec <__libc_init_array+0x38>)
 80029b8:	4c0d      	ldr	r4, [pc, #52]	@ (80029f0 <__libc_init_array+0x3c>)
 80029ba:	1b64      	subs	r4, r4, r5
 80029bc:	10a4      	asrs	r4, r4, #2
 80029be:	2600      	movs	r6, #0
 80029c0:	42a6      	cmp	r6, r4
 80029c2:	d109      	bne.n	80029d8 <__libc_init_array+0x24>
 80029c4:	4d0b      	ldr	r5, [pc, #44]	@ (80029f4 <__libc_init_array+0x40>)
 80029c6:	4c0c      	ldr	r4, [pc, #48]	@ (80029f8 <__libc_init_array+0x44>)
 80029c8:	f000 f818 	bl	80029fc <_init>
 80029cc:	1b64      	subs	r4, r4, r5
 80029ce:	10a4      	asrs	r4, r4, #2
 80029d0:	2600      	movs	r6, #0
 80029d2:	42a6      	cmp	r6, r4
 80029d4:	d105      	bne.n	80029e2 <__libc_init_array+0x2e>
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029dc:	4798      	blx	r3
 80029de:	3601      	adds	r6, #1
 80029e0:	e7ee      	b.n	80029c0 <__libc_init_array+0xc>
 80029e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e6:	4798      	blx	r3
 80029e8:	3601      	adds	r6, #1
 80029ea:	e7f2      	b.n	80029d2 <__libc_init_array+0x1e>
 80029ec:	08002a34 	.word	0x08002a34
 80029f0:	08002a34 	.word	0x08002a34
 80029f4:	08002a34 	.word	0x08002a34
 80029f8:	08002a38 	.word	0x08002a38

080029fc <_init>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	bf00      	nop
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr

08002a08 <_fini>:
 8002a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0a:	bf00      	nop
 8002a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0e:	bc08      	pop	{r3}
 8002a10:	469e      	mov	lr, r3
 8002a12:	4770      	bx	lr
